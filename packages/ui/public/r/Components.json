{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Components",
  "type": "registry:ui",
  "files": [
    {
      "path": "src/components/badge.tsx",
      "content": "import { type ComponentProps, memo } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { cn } from \"@/lib/cn\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type VariantProps, composeText } from \"native-variants\";\r\nimport { TypographyProvider } from \"./typography\";\r\n\r\nconst badgeVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"text\"],\r\n    base: {\r\n      root: {\r\n        borderWidth: 1,\r\n        display: \"flex\",\r\n        fontWeight: \"400\",\r\n        textAlign: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\",\r\n        borderRadius: t.radii.lg,\r\n        textAlignVertical: \"center\",\r\n      },\r\n    },\r\n    variants: {\r\n      variant: {\r\n        default: {\r\n          root: {\r\n            borderColor: t.colors.primary,\r\n            backgroundColor: t.colors.primary,\r\n            color: t.colors.primaryForeground,\r\n          },\r\n        },\r\n        ghost: {\r\n          root: {\r\n            borderColor: t.colors.transparent,\r\n            backgroundColor: t.colors.transparent,\r\n            color: t.colors.primary,\r\n          },\r\n        },\r\n        outline: {\r\n          root: {\r\n            borderColor: t.colors.border,\r\n            backgroundColor: t.colors.transparent,\r\n            color: t.colors.primary,\r\n          },\r\n        },\r\n        secondary: {\r\n          root: {\r\n            borderColor: t.colors.secondary,\r\n            backgroundColor: t.colors.secondary,\r\n            color: t.colors.secondaryForeground,\r\n          },\r\n        },\r\n        destructive: {\r\n          root: {\r\n            borderColor: t.colors.destructive,\r\n            backgroundColor: t.colors.destructive,\r\n            color: t.colors.white,\r\n          },\r\n        },\r\n      },\r\n      size: {\r\n        default: {\r\n          root: {\r\n            height: 30,\r\n            paddingHorizontal: t.spacing[\"3.5\"],\r\n            fontSize: t.fontSizes.xxs,\r\n          },\r\n        },\r\n        sm: {\r\n          root: {\r\n            height: 26,\r\n            fontSize: t.fontSizes.xxs,\r\n            paddingHorizontal: t.spacing[\"2.5\"],\r\n          },\r\n        },\r\n        lg: {\r\n          root: {\r\n            height: 34,\r\n            fontSize: t.fontSizes.xxs,\r\n            paddingHorizontal: t.spacing[\"2.5\"],\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n      variant: \"default\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction BadgeComponent({\r\n  size,\r\n  style,\r\n  variant,\r\n  ...props\r\n}: ComponentProps<typeof View> & VariantProps<typeof badgeVariants>) {\r\n  const styles = badgeVariants({ variant, size });\r\n\r\n  return (\r\n    <TypographyProvider props={composeText(styles.root)}>\r\n      <View style={cn(styles.root, style as any)} {...props} />\r\n    </TypographyProvider>\r\n  );\r\n}\r\n\r\nconst Badge = memo(BadgeComponent);\r\n\r\nexport { Badge, badgeVariants };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/avatar.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\n\r\nimport { type VariantProps, createCTX } from \"native-variants\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, memo } from \"react\";\r\nimport { Image, Text, View } from \"react-native\";\r\n\r\nexport const shortName = (str: string): string => {\r\n  if (!str.trim()) {\r\n    return \"UN\";\r\n  }\r\n\r\n  const parts = str.trim().split(/\\s+/);\r\n\r\n  if (parts.length > 1) {\r\n    return (parts[0].charAt(0) + parts[1].charAt(0)).toUpperCase();\r\n  }\r\n\r\n  return parts[0].substring(0, 2).toUpperCase();\r\n};\r\n\r\nconst { CTXProvider, useCTX } =\r\n  createCTX<VariantProps<typeof avatarVariants>>();\r\n\r\nconst avatarVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"fallback\", \"image\"],\r\n    base: {\r\n      root: {\r\n        display: \"flex\",\r\n        overflow: \"hidden\",\r\n        position: \"relative\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        borderRadius: t.radii.full,\r\n        backgroundColor: t.colors.border,\r\n      },\r\n      image: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        objectFit: \"fill\",\r\n        zIndex: t.zIndex[\"10\"],\r\n      },\r\n      fallback: {\r\n        position: \"absolute\",\r\n        zIndex: -t.zIndex[\"10\"],\r\n      },\r\n    },\r\n    variants: {\r\n      size: {\r\n        default: {\r\n          root: {\r\n            width: 44,\r\n            height: 44,\r\n          },\r\n          fallback: {\r\n            fontSize: t.fontSizes.xs,\r\n          },\r\n        },\r\n        sm: {\r\n          root: {\r\n            width: 56,\r\n            height: 56,\r\n          },\r\n          fallback: {\r\n            fontSize: t.fontSizes.xs,\r\n          },\r\n        },\r\n        md: {\r\n          root: {\r\n            width: 72,\r\n            height: 72,\r\n          },\r\n          fallback: {\r\n            fontSize: t.fontSizes.lg,\r\n          },\r\n        },\r\n        lg: {\r\n          root: {\r\n            width: 96,\r\n            height: 96,\r\n          },\r\n          fallback: {\r\n            fontSize: t.fontSizes[\"2xl\"],\r\n          },\r\n        },\r\n        xl: {\r\n          root: {\r\n            width: 128,\r\n            height: 128,\r\n          },\r\n          fallback: {\r\n            fontSize: t.fontSizes[\"5xl\"],\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction AvatarComponent({\r\n  style,\r\n  size,\r\n  ...props\r\n}: ComponentProps<typeof View> & VariantProps<typeof avatarVariants>) {\r\n  const { root } = avatarVariants({ size });\r\n\r\n  return (\r\n    <CTXProvider props={{ size }}>\r\n      <View style={cn(root, style)} {...props} />\r\n    </CTXProvider>\r\n  );\r\n}\r\n\r\nfunction AvatarFallbackComponent({\r\n  style,\r\n  children,\r\n  ...props\r\n}: ComponentProps<typeof Text>) {\r\n  const ctx = useCTX();\r\n  const { fallback } = avatarVariants({ size: ctx?.size });\r\n\r\n  return (\r\n    <Text style={cn(fallback, style)} {...props}>\r\n      {shortName(String(children))}\r\n    </Text>\r\n  );\r\n}\r\n\r\nfunction AvatarImageComponent({\r\n  style,\r\n  ...props\r\n}: ComponentProps<typeof Image>) {\r\n  const { image } = avatarVariants({});\r\n\r\n  return <Image style={cn(image, style)} {...props} />;\r\n}\r\n\r\nconst Avatar = memo(AvatarComponent);\r\n\r\nconst AvatarFallback = memo(AvatarFallbackComponent);\r\n\r\nconst AvatarImage = memo(AvatarImageComponent);\r\n\r\nexport { Avatar, AvatarFallback, AvatarImage };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/button.tsx",
      "content": "import { type ComponentProps, memo } from \"react\";\r\nimport { TouchableOpacity } from \"react-native\";\r\nimport { Slot } from \"./slot\";\r\nimport { cn } from \"@/lib/cn\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type VariantProps, composeText } from \"native-variants\";\r\nimport { TypographyProvider } from \"./typography\";\r\n\r\nconst buttonVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\"],\r\n    base: {\r\n      root: {\r\n        borderWidth: 1,\r\n        display: \"flex\",\r\n        fontWeight: \"400\",\r\n        textAlign: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\",\r\n        borderRadius: t.radii.lg,\r\n        textAlignVertical: \"center\",\r\n      },\r\n    },\r\n    variants: {\r\n      variant: {\r\n        default: {\r\n          root: {\r\n            borderColor: t.colors.primary,\r\n            backgroundColor: t.colors.primary,\r\n            color: t.colors.primaryForeground,\r\n          },\r\n        },\r\n        ghost: {\r\n          root: {\r\n            borderColor: t.colors.transparent,\r\n            backgroundColor: t.colors.transparent,\r\n            color: t.colors.primary,\r\n          },\r\n        },\r\n        outline: {\r\n          root: {\r\n            borderColor: t.colors.border,\r\n            backgroundColor: t.colors.transparent,\r\n            color: t.colors.primary,\r\n          },\r\n        },\r\n        secondary: {\r\n          root: {\r\n            borderColor: t.colors.secondary,\r\n            backgroundColor: t.colors.secondary,\r\n            color: t.colors.secondaryForeground,\r\n          },\r\n        },\r\n        destructive: {\r\n          root: {\r\n            borderColor: t.colors.destructive,\r\n            backgroundColor: t.colors.destructive,\r\n            color: t.colors.white,\r\n          },\r\n        },\r\n      },\r\n      size: {\r\n        default: {\r\n          root: {\r\n            height: 40,\r\n            paddingHorizontal: t.spacing[\"3.5\"],\r\n            fontSize: t.fontSizes.sm,\r\n          },\r\n        },\r\n        sm: {\r\n          root: {\r\n            height: 38,\r\n            fontSize: t.fontSizes.xs,\r\n            paddingHorizontal: t.spacing[\"2.5\"],\r\n          },\r\n        },\r\n        lg: {\r\n          root: {\r\n            height: 44,\r\n            fontSize: t.fontSizes.sm,\r\n            paddingHorizontal: t.spacing[\"2.5\"],\r\n          },\r\n        },\r\n        icon: {\r\n          root: {\r\n            width: 40,\r\n            height: 40,\r\n            padding: t.spacing[\"0\"],\r\n            borderRadius: t.radii.full,\r\n          },\r\n        },\r\n      },\r\n      disabled: {\r\n        true: {\r\n          root: {\r\n            opacity: t.opacity[\"50\"],\r\n            pointerEvents: \"none\",\r\n            userSelect: \"none\",\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            opacity: t.opacity[\"100\"],\r\n            pointerEvents: \"auto\",\r\n            userSelect: \"auto\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n      variant: \"default\",\r\n      disabled: \"false\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction ButtonComponent({\r\n  size,\r\n  style,\r\n  variant,\r\n  asChild = false,\r\n  disabled = false,\r\n  ...props\r\n}: ComponentProps<typeof TouchableOpacity> &\r\n  VariantProps<typeof buttonVariants> & {\r\n    asChild?: boolean;\r\n  }) {\r\n  const Comp = asChild ? Slot : TouchableOpacity;\r\n  const styles = buttonVariants({ variant, size, disabled });\r\n\r\n  return (\r\n    <TypographyProvider props={composeText(styles.root)}>\r\n      <Comp\r\n        activeOpacity={0.6}\r\n        style={cn(styles.root, style as any)}\r\n        {...props}\r\n      />\r\n    </TypographyProvider>\r\n  );\r\n}\r\n\r\nconst Button = memo(ButtonComponent);\r\n\r\nexport { Button, buttonVariants };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/card.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport type { ComponentProps } from \"react\";\r\nimport { Text, View } from \"react-native\";\r\n\r\nconst cardVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"title\", \"description\", \"header\", \"content\", \"footer\"],\r\n    base: {\r\n      root: {\r\n        borderWidth: 1,\r\n        display: \"flex\",\r\n        gap: t.spacing[\"6\"],\r\n        flexDirection: \"column\",\r\n        borderRadius: t.radii[\"xl\"],\r\n        borderColor: t.colors.border,\r\n        backgroundColor: t.colors.card,\r\n        paddingVertical: t.spacing[\"6\"],\r\n      },\r\n      title: {\r\n        fontWeight: \"600\",\r\n        fontSize: t.fontSizes.xl,\r\n        color: t.colors.cardForeground,\r\n      },\r\n      description: {\r\n        fontSize: t.fontSizes.sm,\r\n        color: t.colors.mutedForeground,\r\n      },\r\n      header: {\r\n        display: \"flex\",\r\n        gap: t.spacing[\"1.5\"],\r\n        flexDirection: \"column\",\r\n        alignItems: \"flex-start\",\r\n        paddingHorizontal: t.spacing[\"6\"],\r\n      },\r\n      content: {\r\n        paddingHorizontal: t.spacing[\"6\"],\r\n      },\r\n      footer: {\r\n        display: \"flex\",\r\n        gap: t.spacing[\"3\"],\r\n        alignItems: \"center\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"flex-end\",\r\n        paddingHorizontal: t.spacing[\"6\"],\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nfunction Card({ style, ...props }: ComponentProps<typeof View>) {\r\n  const styles = cardVariants();\r\n\r\n  return <View style={cn(styles.root, style)} {...props} />;\r\n}\r\n\r\nfunction CardTitle({ style, ...props }: ComponentProps<typeof Text>) {\r\n  const styles = cardVariants();\r\n\r\n  return <Text style={cn(styles.title, style)} {...props} />;\r\n}\r\n\r\nfunction CardDescription({ style, ...props }: ComponentProps<typeof Text>) {\r\n  const styles = cardVariants();\r\n\r\n  return <Text style={cn(styles.description, style)} {...props} />;\r\n}\r\n\r\nfunction CardHeader({ style, ...props }: ComponentProps<typeof View>) {\r\n  const styles = cardVariants();\r\n\r\n  return <View style={cn(styles.header, style)} {...props} />;\r\n}\r\n\r\nfunction CardContent({ style, ...props }: ComponentProps<typeof View>) {\r\n  const styles = cardVariants();\r\n\r\n  return <View style={cn(styles.content, style)} {...props} />;\r\n}\r\n\r\nfunction CardFooter({ style, ...props }: ComponentProps<typeof View>) {\r\n  const styles = cardVariants();\r\n\r\n  return <View style={cn(styles.footer, style)} {...props} />;\r\n}\r\n\r\nexport {\r\n  Card,\r\n  CardTitle,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardContent,\r\n  CardFooter,\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/collapsible.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, useState } from \"react\";\r\nimport {\r\n  type GestureResponderEvent,\r\n  type LayoutChangeEvent,\r\n  View,\r\n} from \"react-native\";\r\nimport Animated, {\r\n  useAnimatedStyle,\r\n  useSharedValue,\r\n  withTiming,\r\n} from \"react-native-reanimated\";\r\nimport { Slot } from \"./slot\";\r\nimport { Button } from \"./button\";\r\nimport { createCTX } from \"native-variants\";\r\n\r\ntype CommonProps = {\r\n  onChange?: VoidFunction;\r\n  value?: boolean;\r\n  duration?: number;\r\n  minHeight?: number;\r\n};\r\n\r\nconst { CTXProvider, useCTX } = createCTX<CommonProps>();\r\n\r\nconst collapsibleVariants = styled((ctx, _) =>\r\n  ctx({\r\n    slots: [\"root\", \"content\"],\r\n    base: {\r\n      root: {\r\n        overflow: \"hidden\",\r\n        width: \"100%\",\r\n      },\r\n      content: {\r\n        position: \"absolute\",\r\n        height: \"auto\",\r\n        width: \"100%\",\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nfunction Collapsible({\r\n  style,\r\n  value,\r\n  onChange,\r\n  minHeight = 0,\r\n  duration = 400,\r\n  defaultValue = false,\r\n  children,\r\n  ...props\r\n}: ComponentProps<typeof View> &\r\n  CommonProps & {\r\n    defaultValue?: boolean;\r\n    children: React.ReactNode;\r\n  }) {\r\n  const styles = collapsibleVariants({});\r\n  const [internalValue, setInternalValue] = useState<boolean>(\r\n    value ?? defaultValue\r\n  );\r\n\r\n  const handleInternalChange = () => {\r\n    if (onChange) {\r\n      onChange();\r\n    } else {\r\n      setInternalValue((prevState) => !prevState);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CTXProvider\r\n      props={{\r\n        value: value ?? internalValue,\r\n        onChange: handleInternalChange,\r\n        duration,\r\n        minHeight,\r\n      }}\r\n    >\r\n      <View style={cn(styles.root, style)} {...props}>\r\n        {children}\r\n      </View>\r\n    </CTXProvider>\r\n  );\r\n}\r\n\r\nfunction CollapsibleTrigger({\r\n  asChild = false,\r\n  variant,\r\n  size,\r\n  disabled,\r\n  onPress,\r\n  ...props\r\n}: ComponentProps<typeof Button> & {\r\n  asChild?: boolean;\r\n}) {\r\n  const ctx = useCTX();\r\n  const Comp = asChild ? Slot : Button;\r\n\r\n  const onToggle = (event: GestureResponderEvent) => {\r\n    if (onPress) {\r\n      onPress(event);\r\n    }\r\n\r\n    ctx?.onChange?.();\r\n  };\r\n\r\n  return <Comp onPress={onToggle} {...props} />;\r\n}\r\n\r\nfunction CollapsibleContent({ style, ...props }: ComponentProps<typeof View>) {\r\n  const ctx = useCTX();\r\n  const styles = collapsibleVariants({});\r\n  const animatedHeight = useSharedValue(0);\r\n  const [height, setHeight] = useState<number>(0);\r\n\r\n  const onLayout = (event: LayoutChangeEvent) => {\r\n    const onLayoutHeight = event.nativeEvent.layout.height;\r\n\r\n    if (onLayoutHeight > 0 && height !== onLayoutHeight) {\r\n      setHeight(onLayoutHeight);\r\n    }\r\n  };\r\n\r\n  const animation = useAnimatedStyle(() => {\r\n    const targetHeight = ctx?.value ? height : 0;\r\n    animatedHeight.value = withTiming(\r\n      Math.max(targetHeight, ctx?.minHeight ?? 0),\r\n      {\r\n        duration: ctx?.duration,\r\n      }\r\n    );\r\n\r\n    return {\r\n      height: animatedHeight.value,\r\n    };\r\n  }, [ctx?.value, ctx?.duration, height, ctx?.minHeight]);\r\n\r\n  return (\r\n    <Animated.View {...props} style={cn(styles.root, animation)}>\r\n      <View onLayout={onLayout} style={cn(styles.content, style)} {...props} />\r\n    </Animated.View>\r\n  );\r\n}\r\n\r\nexport { Collapsible, CollapsibleContent, CollapsibleTrigger };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/drawer.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { type VariantProps, createCTX } from \"native-variants\";\r\nimport { styled, theme } from \"@/lib/nva\";\r\nimport {\r\n  BottomSheetBackdrop,\r\n  BottomSheetBackdropProps,\r\n  BottomSheetModal,\r\n  BottomSheetModalProvider,\r\n  BottomSheetView,\r\n} from \"@gorhom/bottom-sheet\";\r\nimport { BottomSheetModalMethods } from \"@gorhom/bottom-sheet/lib/typescript/types\";\r\nimport {\r\n  type ComponentProps,\r\n  memo,\r\n  type PropsWithChildren,\r\n  type RefObject,\r\n  useCallback,\r\n} from \"react\";\r\nimport { Platform, View } from \"react-native\";\r\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\r\nimport { Button } from \"./button\";\r\nimport { Icon } from \"./icon\";\r\n\r\ntype CommonProps = {\r\n  sheetRef?: RefObject<BottomSheetModalMethods<any> | null>;\r\n};\r\n\r\nconst { CTXProvider, useCTX } = createCTX<\r\n  VariantProps<typeof drawerVariants> & CommonProps\r\n>();\r\n\r\nconst drawerVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\r\n      \"root\",\r\n      \"handler\",\r\n      \"wrapper\",\r\n      \"handler_indicator\",\r\n      \"header\",\r\n      \"content\",\r\n    ],\r\n    base: {\r\n      handler: {\r\n        paddingBottom: 0,\r\n        paddingTop: 0,\r\n      },\r\n      handler_indicator: {\r\n        backgroundColor: t.colors.border,\r\n      },\r\n      header: {\r\n        display: \"flex\",\r\n        alignItems: \"flex-start\",\r\n        justifyContent: \"flex-start\",\r\n        paddingBottom: t.spacing[\"2\"],\r\n        paddingHorizontal: t.spacing[\"3.5\"],\r\n        paddingTop: Platform.OS === \"ios\" ? t.spacing[\"2\"] : t.spacing[\"3\"],\r\n      },\r\n      content: {\r\n        paddingBottom: t.spacing[\"6\"],\r\n        paddingHorizontal: t.spacing[\"6\"],\r\n        paddingTop: t.spacing[\"2\"],\r\n      },\r\n    },\r\n    variants: {\r\n      fullScreen: {\r\n        true: {\r\n          root: {\r\n            borderRadius: 0,\r\n          },\r\n          content: {\r\n            height: \"100%\",\r\n          },\r\n          handler_indicator: {\r\n            display: \"none\",\r\n            padding: 0,\r\n          },\r\n          wrapper: {\r\n            height: \"100%\",\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            borderRadius: t.radii[\"xl\"],\r\n          },\r\n          content: {\r\n            height: \"auto\",\r\n          },\r\n          handler_indicator: {\r\n            marginTop: t.radii[\"xl\"],\r\n            paddingBottom: 0,\r\n          },\r\n          wrapper: {\r\n            height: \"auto\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      fullScreen: \"false\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction Drawer({\r\n  children,\r\n  fullScreen,\r\n  sheetRef,\r\n}: ComponentProps<typeof BottomSheetModalProvider> &\r\n  VariantProps<typeof drawerVariants> &\r\n  CommonProps) {\r\n  return (\r\n    <BottomSheetModalProvider>\r\n      <CTXProvider props={{ fullScreen, sheetRef }}>{children}</CTXProvider>\r\n    </BottomSheetModalProvider>\r\n  );\r\n}\r\n\r\nfunction DrawerComponent({\r\n  children,\r\n  asChild = false,\r\n  style,\r\n  ...props\r\n}: ComponentProps<typeof BottomSheetModal> &\r\n  PropsWithChildren & {\r\n    asChild?: boolean;\r\n  }) {\r\n  const ctx = useCTX();\r\n  const insets = useSafeAreaInsets();\r\n  const styles = drawerVariants({ fullScreen: ctx?.fullScreen });\r\n\r\n  const onClose = useCallback(() => {\r\n    ctx?.sheetRef?.current?.close();\r\n  }, [ctx?.sheetRef]);\r\n\r\n  return (\r\n    <BottomSheetModal\r\n      ref={ctx?.sheetRef}\r\n      enableDismissOnClose\r\n      handleStyle={styles.handler}\r\n      backgroundStyle={styles.root}\r\n      enableOverDrag={!ctx?.fullScreen}\r\n      enableDynamicSizing={!ctx?.fullScreen}\r\n      enablePanDownToClose={!ctx?.fullScreen}\r\n      handleIndicatorStyle={styles.handler_indicator}\r\n      enableHandlePanningGesture={!ctx?.fullScreen}\r\n      enableContentPanningGesture={!ctx?.fullScreen}\r\n      snapPoints={!ctx?.fullScreen ? undefined : [\"100%\"]}\r\n      backdropComponent={(props: BottomSheetBackdropProps) => (\r\n        <BottomSheetBackdrop\r\n          opacity={0.5}\r\n          appearsOnIndex={0}\r\n          disappearsOnIndex={-1}\r\n          {...props}\r\n        />\r\n      )}\r\n      {...props}\r\n    >\r\n      <BottomSheetView\r\n        style={cn(\r\n          styles.wrapper,\r\n          ctx?.fullScreen && {\r\n            paddingTop: insets.top,\r\n          },\r\n          {\r\n            paddingBottom:\r\n              Platform.OS === \"ios\" ? theme.spacing[\"4\"] : insets.bottom,\r\n          }\r\n        )}\r\n      >\r\n        {asChild ? (\r\n          children\r\n        ) : (\r\n          <>\r\n            {ctx?.fullScreen && (\r\n              <View style={styles.header}>\r\n                <Button onPress={onClose} size=\"icon\" variant=\"ghost\">\r\n                  <Icon name=\"x\" size={28} />\r\n                </Button>\r\n              </View>\r\n            )}\r\n            <View\r\n              style={\r\n                cn(\r\n                  styles.content,\r\n                  { paddingBottom: insets.bottom },\r\n                  style\r\n                ) as any\r\n              }\r\n            >\r\n              {children}\r\n            </View>\r\n          </>\r\n        )}\r\n      </BottomSheetView>\r\n    </BottomSheetModal>\r\n  );\r\n}\r\n\r\nconst DrawerContent = memo(DrawerComponent);\r\n\r\nexport { DrawerContent, Drawer };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/flex.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport type { VariantProps } from \"native-variants\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, memo } from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\nconst flexVariants = styled((ctx, _) =>\r\n  ctx({\r\n    slots: [\"root\"],\r\n    base: {\r\n      root: {\r\n        display: \"flex\",\r\n      },\r\n    },\r\n    variants: {\r\n      vertical: {\r\n        true: { root: { flexDirection: \"column\" } },\r\n        false: { root: { flexDirection: \"row\" } },\r\n      },\r\n      align: {\r\n        end: { root: { alignItems: \"flex-end\" } },\r\n        center: { root: { alignItems: \"center\" } },\r\n        stretch: { root: { alignItems: \"stretch\" } },\r\n        start: { root: { alignItems: \"flex-start\" } },\r\n        baseline: { root: { alignItems: \"baseline\" } },\r\n      },\r\n      justify: {\r\n        end: { root: { justifyContent: \"flex-end\" } },\r\n        center: { root: { justifyContent: \"center\" } },\r\n        start: { root: { justifyContent: \"flex-start\" } },\r\n        between: { root: { justifyContent: \"space-between\" } },\r\n        evenly: { root: { justifyContent: \"space-evenly\" } },\r\n        around: { root: { justifyContent: \"space-around\" } },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      vertical: false,\r\n      align: \"start\",\r\n      justify: \"start\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction FlexComponent({\r\n  style,\r\n  align,\r\n  justify,\r\n  vertical,\r\n  noWrap = false,\r\n  ...props\r\n}: {\r\n  noWrap?: boolean;\r\n} & ComponentProps<typeof View> &\r\n  VariantProps<typeof flexVariants>) {\r\n  const styles = flexVariants({ align, justify, vertical });\r\n\r\n  return (\r\n    <View\r\n      style={cn(\r\n        styles.root,\r\n        style,\r\n        noWrap && {\r\n          flexWrap: \"nowrap\",\r\n        }\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nconst Flex = memo(FlexComponent);\r\n\r\nexport { Flex };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/form.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, createContext, useContext, useId } from \"react\";\r\nimport {\r\n  Controller,\r\n  type ControllerProps,\r\n  type FieldPath,\r\n  type FieldValues,\r\n  FormProvider,\r\n  useFormContext,\r\n  useFormState,\r\n} from \"react-hook-form\";\r\nimport { Text, View } from \"react-native\";\r\n\r\nconst formVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\r\n      \"root\",\r\n      \"item\",\r\n      \"field\",\r\n      \"label\",\r\n      \"description\",\r\n      \"control\",\r\n      \"message\",\r\n    ],\r\n    base: {\r\n      root: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        gap: t.spacing[\"1.5\"],\r\n        justifyContent: \"center\",\r\n      },\r\n      item: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        gap: t.spacing[\"0.5\"],\r\n        width: \"100%\",\r\n      },\r\n      field: {\r\n        width: \"100%\",\r\n      },\r\n      label: {\r\n        fontSize: t.fontSizes.xs,\r\n        fontWeight: \"500\",\r\n        color: t.colors.mutedForeground,\r\n      },\r\n      description: {\r\n        fontSize: t.fontSizes.xs,\r\n        color: t.colors.mutedForeground,\r\n        fontWeight: \"400\",\r\n      },\r\n      control: {\r\n        width: \"100%\",\r\n        height: \"auto\",\r\n      },\r\n      message: {\r\n        fontSize: t.fontSizes.xs,\r\n        color: t.colors.destructive,\r\n        fontWeight: \"400\",\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName;\r\n};\r\n\r\ntype FormItemContextValue = {\r\n  id: string;\r\n};\r\n\r\nconst FormFieldContext = createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n);\r\n\r\nconst FormItemContext = createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n);\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = useContext(FormFieldContext);\r\n  const itemContext = useContext(FormItemContext);\r\n  const { getFieldState } = useFormContext();\r\n  const formState = useFormState({ name: fieldContext.name });\r\n  const fieldState = getFieldState(fieldContext.name, formState);\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\");\r\n  }\r\n\r\n  const { id } = itemContext;\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  };\r\n};\r\n\r\nconst Form = FormProvider;\r\n\r\nfunction FormField<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({ ...props }: ControllerProps<TFieldValues, TName>) {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  );\r\n}\r\n\r\nfunction FormItem({ style, ...props }: ComponentProps<typeof View>) {\r\n  const id = useId();\r\n  const styles = formVariants();\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <View style={cn(styles.item, style)} {...props} />\r\n    </FormItemContext.Provider>\r\n  );\r\n}\r\n\r\nfunction FormLabel({ style, ...props }: ComponentProps<typeof Text>) {\r\n  const styles = formVariants();\r\n\r\n  return <Text style={cn(styles.label, style)} {...props} />;\r\n}\r\n\r\nfunction FormDescription({ style, ...props }: ComponentProps<typeof Text>) {\r\n  const { formDescriptionId } = useFormField();\r\n  const styles = formVariants();\r\n\r\n  return (\r\n    <Text\r\n      id={formDescriptionId}\r\n      style={cn(styles.description, style)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction FormMessage({ style, ...props }: ComponentProps<typeof Text>) {\r\n  const styles = formVariants();\r\n  const { error, formMessageId } = useFormField();\r\n  const body = error ? String(error?.message ?? \"\") : props.children;\r\n\r\n  if (!body) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Text id={formMessageId} style={cn(styles.message, style)} {...props}>\r\n      {body}\r\n    </Text>\r\n  );\r\n}\r\n\r\nfunction FormControl({ style, ...props }: ComponentProps<typeof View>) {\r\n  const { formItemId } = useFormField();\r\n\r\n  const styles = formVariants();\r\n\r\n  return <View id={formItemId} style={cn(styles.control, style)} {...props} />;\r\n}\r\n\r\nexport {\r\n  Form,\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/icon.tsx",
      "content": "import glyphmaps_icon from \"@/lib/icons.json\";\r\nimport { View, type ColorValue } from \"react-native\";\r\nimport { SvgXml } from \"react-native-svg\";\r\nimport { styled, theme } from \"@/lib/nva\";\r\nimport { type ComponentProps, memo } from \"react\";\r\nimport { cn } from \"@/lib/cn\";\r\nimport { useTypography } from \"./typography\";\r\n\r\nconst iconVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\"],\r\n    base: {\r\n      root: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nfunction getIconColor(\r\n  color: string | ColorValue | undefined,\r\n  ctxStyles: any\r\n): ColorValue {\r\n  return color ?? ctxStyles?.color ?? theme.colors.primary;\r\n}\r\n\r\ntype IconGlyphmap = keyof typeof glyphmaps_icon;\r\n\r\nfunction IconComponent({\r\n  name,\r\n  size = 20,\r\n  color,\r\n  style,\r\n  ...props\r\n}: ComponentProps<typeof View> & {\r\n  size?: number;\r\n  name: IconGlyphmap;\r\n  color?: string | ColorValue;\r\n}) {\r\n  const styles = iconVariants();\r\n  const ctxStyles = useTypography();\r\n  const xml = glyphmaps_icon[name!];\r\n\r\n  if (!xml) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <View style={cn(styles.root, style)} {...props}>\r\n      <SvgXml\r\n        xml={xml}\r\n        width={size}\r\n        height={size}\r\n        color={getIconColor(color, ctxStyles)}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst Icon = memo(IconComponent);\r\n\r\nexport { Icon };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/input.tsx",
      "content": "import { type ComponentProps, memo } from \"react\";\r\nimport { type StyleProp, TextInput, type TextStyle, View } from \"react-native\";\r\nimport { type VariantProps, alpha } from \"native-variants\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { useInteractive } from \"@/hooks/use-interactive\";\r\nimport { cn } from \"@/lib/cn\";\r\n\r\nconst inputVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"field\", \"input\", \"icon\", \"placeholder\"],\r\n    base: {\r\n      root: {\r\n        borderWidth: 1,\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        borderRadius: t.radii.lg,\r\n      },\r\n      field: { flex: 1 },\r\n      input: {\r\n        flex: 1,\r\n        borderTopEndRadius: t.radii.lg,\r\n        borderBottomEndRadius: t.radii.lg,\r\n        paddingHorizontal: t.spacing[\"4\"],\r\n        textAlignVertical: \"center\",\r\n      },\r\n      placeholder: {\r\n        color: t.colors.mutedForeground,\r\n      },\r\n    },\r\n    variants: {\r\n      focus: {\r\n        true: {\r\n          root: {\r\n            borderColor: t.colors.ring,\r\n            backgroundColor: t.colors.transparent,\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            borderColor: t.colors.input,\r\n            backgroundColor: alpha(t.colors.input, 30),\r\n          },\r\n        },\r\n      },\r\n      size: {\r\n        default: {\r\n          root: { height: 40 },\r\n          field: { height: 40 },\r\n        },\r\n        lg: {\r\n          root: { height: 46 },\r\n          field: { height: 46 },\r\n        },\r\n      },\r\n      disabled: {\r\n        true: {\r\n          root: {\r\n            opacity: t.opacity[\"50\"],\r\n            pointerEvents: \"none\",\r\n            userSelect: \"none\",\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            opacity: t.opacity[\"100\"],\r\n            pointerEvents: \"auto\",\r\n            userSelect: \"auto\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n      focus: false,\r\n      disabled: false,\r\n    },\r\n  })\r\n);\r\n\r\nfunction InputComponent({\r\n  style,\r\n  size,\r\n  onChange,\r\n  fieldStyle,\r\n  disabled,\r\n  children,\r\n  ...props\r\n}: Omit<ComponentProps<typeof TextInput>, \"editable\"> &\r\n  VariantProps<typeof inputVariants> & {\r\n    onChange?: (input: string) => void;\r\n    fieldStyle?: StyleProp<TextStyle>;\r\n  }) {\r\n  const { focus, onFocus, onBlur } = useInteractive();\r\n  const { root, field, input, placeholder } = inputVariants({\r\n    size,\r\n    focus,\r\n    disabled,\r\n  });\r\n\r\n  return (\r\n    <View style={cn(root, style as any)}>\r\n      <View style={field}>\r\n        <TextInput\r\n          style={cn(input, fieldStyle)}\r\n          onBlur={onBlur}\r\n          onFocus={onFocus}\r\n          onChangeText={onChange}\r\n          editable={!disabled}\r\n          placeholderTextColor={placeholder?.color}\r\n          {...props}\r\n        />\r\n      </View>\r\n      {children}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst Input = memo(InputComponent);\r\n\r\nexport { Input };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/progress.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { type VariantProps } from \"native-variants\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { View, Text } from \"react-native\";\r\nimport { type ComponentProps } from \"react\";\r\n\r\ntype CommonProps = {\r\n  min: number;\r\n  value: number;\r\n  max: number;\r\n};\r\n\r\nconst progressVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"wrapper\", \"bar\", \"label\"],\r\n    base: {\r\n      root: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        overflow: \"hidden\",\r\n        gap: t.spacing[\"1\"],\r\n        flexDirection: \"column\",\r\n      },\r\n      wrapper: {\r\n        borderRadius: t.radii.full,\r\n        backgroundColor: t.colors.input,\r\n      },\r\n      bar: {\r\n        height: \"100%\",\r\n        borderRadius: t.radii.full,\r\n        backgroundColor: t.colors.primary,\r\n      },\r\n      label: {\r\n        textAlign: \"right\",\r\n        fontSize: t.fontSizes.xxs,\r\n        color: t.colors.mutedForeground,\r\n      },\r\n    },\r\n    variants: {\r\n      size: {\r\n        default: {\r\n          wrapper: {\r\n            height: 8,\r\n          },\r\n        },\r\n        sm: {\r\n          wrapper: {\r\n            height: 6,\r\n          },\r\n        },\r\n        lg: {\r\n          wrapper: {\r\n            height: 10,\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction getProgressValue(config: CommonProps): number {\r\n  const { max, min, value } = config;\r\n\r\n  const clampedValue = Math.min(Math.max(value, min), max);\r\n  return max - min === 0 ? 0 : (clampedValue - min) / (max - min);\r\n}\r\n\r\nfunction Progress({\r\n  min = 0,\r\n  value = 0,\r\n  max = 100,\r\n  size,\r\n  ...props\r\n}: ComponentProps<typeof View> &\r\n  CommonProps &\r\n  VariantProps<typeof progressVariants>) {\r\n  const styles = progressVariants({ size });\r\n  const progress = getProgressValue({ min, value, max });\r\n\r\n  return (\r\n    <View style={styles.root} {...props}>\r\n      <View style={styles.wrapper}>\r\n        <View style={cn(styles.bar, { width: `${progress * 100}%` })} />\r\n      </View>\r\n      <Text style={styles.label}>{`${value} / ${max}`}</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport { Progress };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/radio.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, memo } from \"react\";\r\nimport { TouchableOpacity, View } from \"react-native\";\r\n\r\nconst radioVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"indicator\"],\r\n    base: {\r\n      root: {\r\n        width: 22,\r\n        height: 22,\r\n        borderWidth: 2,\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        borderRadius: t.radii.full,\r\n      },\r\n      indicator: {\r\n        padding: 1,\r\n        minWidth: 12,\r\n        minHeight: 12,\r\n        overflow: \"hidden\",\r\n        borderRadius: t.radii.full,\r\n      },\r\n    },\r\n    variants: {\r\n      active: {\r\n        true: {\r\n          root: {\r\n            borderColor: t.colors.primary,\r\n          },\r\n          indicator: {\r\n            backgroundColor: t.colors.primary,\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            borderColor: t.colors.input,\r\n          },\r\n          indicator: {\r\n            backgroundColor: t.colors.transparent,\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      active: false,\r\n    },\r\n  })\r\n);\r\n\r\nfunction RadioComponent({\r\n  style,\r\n  value: active,\r\n  ...props\r\n}: ComponentProps<typeof TouchableOpacity> & {\r\n  value?: boolean;\r\n}) {\r\n  const styles = radioVariants({ active });\r\n\r\n  return (\r\n    <TouchableOpacity style={cn(styles.root, style)} {...props}>\r\n      <View style={styles.indicator} />\r\n    </TouchableOpacity>\r\n  );\r\n}\r\n\r\nconst Radio = memo(RadioComponent);\r\n\r\nexport { Radio };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/scroll-area.tsx",
      "content": "import { type ComponentProps } from \"react\";\r\nimport { ScrollView } from \"react-native\";\r\n\r\nfunction ScrollArea({ ...props }: ComponentProps<typeof ScrollView>) {\r\n  return (\r\n    <ScrollView\r\n      showsVerticalScrollIndicator={false}\r\n      showsHorizontalScrollIndicator={false}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { ScrollArea };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/select.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport {\r\n  alpha,\r\n  composeText,\r\n  createCTX,\r\n  type VariantProps,\r\n} from \"native-variants\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, useState } from \"react\";\r\nimport { ScrollView, Text, TouchableOpacity, View } from \"react-native\";\r\nimport { TypographyProvider } from \"./typography\";\r\nimport { Icon } from \"./icon\";\r\n\r\ntype CommonProps = {\r\n  value?: string;\r\n  onChange?: (input: string) => void;\r\n};\r\n\r\nconst { CTXProvider, useCTX } = createCTX<\r\n  VariantProps<typeof selectVariants> & CommonProps\r\n>();\r\n\r\nconst selectVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\r\n      \"root\",\r\n      \"wrapper\",\r\n      \"content\",\r\n      \"trigger\",\r\n      \"indicator\",\r\n      \"item\",\r\n      \"group\",\r\n      \"label\",\r\n    ],\r\n    base: {\r\n      root: {\r\n        maxHeight: 250,\r\n      },\r\n      wrapper: {\r\n        display: \"flex\",\r\n        gap: t.spacing[\"2\"],\r\n        flexDirection: \"column\",\r\n      },\r\n      trigger: {\r\n        height: 40,\r\n        display: \"flex\",\r\n        fontWeight: \"400\",\r\n        overflow: \"hidden\",\r\n        textAlign: \"center\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        borderRadius: t.radii.lg,\r\n\r\n        textAlignVertical: \"center\",\r\n        justifyContent: \"space-between\",\r\n      },\r\n      content: {\r\n        display: \"flex\",\r\n        gap: t.spacing[\"2\"],\r\n        flexDirection: \"column\",\r\n      },\r\n      item: {\r\n        flex: 1,\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        gap: t.spacing[\"2\"],\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        fontSize: t.fontSizes.sm,\r\n        paddingHorizontal: t.spacing[\"3.5\"],\r\n      },\r\n      indicator: {\r\n        marginLeft: \"auto\",\r\n      },\r\n      group: {\r\n        display: \"flex\",\r\n        gap: t.spacing[\"3.5\"],\r\n        flexDirection: \"column\",\r\n      },\r\n      label: {\r\n        position: \"static\",\r\n        fontSize: t.fontSizes.sm,\r\n        color: t.colors.primary,\r\n        fontWeight: \"500\",\r\n      },\r\n    },\r\n    variants: {\r\n      active: {\r\n        true: {\r\n          item: {\r\n            color: t.colors.primary,\r\n            backgroundColor: alpha(t.colors.primary, 5),\r\n          },\r\n          indicator: {\r\n            color: t.colors.primary,\r\n          },\r\n        },\r\n        false: {\r\n          item: {\r\n            color: t.colors.mutedForeground,\r\n            backgroundColor: t.colors.background,\r\n          },\r\n        },\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nfunction Select({\r\n  style,\r\n  value,\r\n  onChange,\r\n  defaultValue,\r\n  ...props\r\n}: ComponentProps<typeof View> &\r\n  CommonProps & {\r\n    defaultValue?: string;\r\n  }) {\r\n  const styles = selectVariants();\r\n\r\n  const [internalValue, setInternalValue] = useState<string | undefined>(\r\n    defaultValue\r\n  );\r\n\r\n  const selectedValue = value ?? internalValue;\r\n\r\n  function handleChange(newValue: string) {\r\n    setInternalValue(newValue);\r\n    if (onChange) onChange(newValue);\r\n  }\r\n\r\n  return (\r\n    <CTXProvider props={{ value: selectedValue, onChange: handleChange }}>\r\n      <ScrollView\r\n        style={cn(styles.root, style)}\r\n        contentContainerStyle={styles.wrapper}\r\n        {...props}\r\n      />\r\n    </CTXProvider>\r\n  );\r\n}\r\n\r\nfunction SelectItem({\r\n  value,\r\n  style,\r\n  children,\r\n  ...props\r\n}: ComponentProps<typeof TouchableOpacity> & Pick<CommonProps, \"value\">) {\r\n  const ctx = useCTX();\r\n  const active = ctx?.value === value;\r\n\r\n  const styles = selectVariants({ active });\r\n\r\n  return (\r\n    <TypographyProvider props={composeText(styles.item)}>\r\n      <TouchableOpacity\r\n        onPress={() => ctx?.onChange && ctx?.onChange(value!)}\r\n        style={cn(styles.trigger, style)}\r\n        {...props}\r\n      >\r\n        <View style={styles.item}>\r\n          {children}\r\n          {active && <Icon style={styles.indicator} name=\"check\" />}\r\n        </View>\r\n      </TouchableOpacity>\r\n    </TypographyProvider>\r\n  );\r\n}\r\n\r\nfunction SelectGroup({ style, ...props }: ComponentProps<typeof View>) {\r\n  const styles = selectVariants();\r\n\r\n  return <View style={cn(styles.group, style)} {...props} />;\r\n}\r\n\r\nfunction SelectContent({ style, ...props }: ComponentProps<typeof View>) {\r\n  const styles = selectVariants();\r\n\r\n  return <View style={cn(styles.content, style)} {...props} />;\r\n}\r\n\r\nfunction SelectLabel({ style, ...props }: ComponentProps<typeof Text>) {\r\n  const styles = selectVariants();\r\n\r\n  return <Text style={cn(styles.label, style)} {...props} />;\r\n}\r\n\r\nexport { Select, SelectItem, SelectGroup, SelectLabel, SelectContent };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/separator.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { type VariantProps } from \"native-variants\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps } from \"react\";\r\nimport { View } from \"react-native\";\r\n\r\nconst separatorVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\"],\r\n    base: {\r\n      root: {\r\n        backgroundColor: t.colors.border,\r\n      },\r\n    },\r\n    variants: {\r\n      orientation: {\r\n        vertical: {\r\n          root: {\r\n            height: \"100%\",\r\n            width: 0.5,\r\n          },\r\n        },\r\n        horizontal: {\r\n          root: {\r\n            width: \"100%\",\r\n            height: 0.5,\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      orientation: \"horizontal\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction Separator({\r\n  style,\r\n  orientation,\r\n  ...props\r\n}: ComponentProps<typeof View> & VariantProps<typeof separatorVariants>) {\r\n  const styles = separatorVariants({ orientation });\r\n\r\n  return <View style={cn(styles.root, style)} {...props} />;\r\n}\r\n\r\nexport { Separator };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/skeleton.tsx",
      "content": "import { LinearGradient } from \"expo-linear-gradient\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport Animated, {\r\n  useAnimatedStyle,\r\n  useSharedValue,\r\n  withRepeat,\r\n  withTiming,\r\n} from \"react-native-reanimated\";\r\nimport { styled, theme } from \"@/lib/nva\";\r\nimport { type ComponentProps, useEffect } from \"react\";\r\nimport { cn } from \"@/lib/cn\";\r\n\r\nconst skeletonVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"wrapper\", \"content\"],\r\n    base: {\r\n      root: {\r\n        backgroundColor: theme.colors.ring,\r\n        overflow: \"hidden\",\r\n      },\r\n      wrapper: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n      },\r\n      content: {\r\n        opacity: t.opacity[\"0\"],\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nfunction Skeleton({\r\n  width,\r\n  height,\r\n  radius = 6,\r\n  children,\r\n  ...props\r\n}: ComponentProps<typeof View> & {\r\n  width?: string | number;\r\n  height?: string | number;\r\n  radius?: number;\r\n}) {\r\n  const styles = skeletonVariants();\r\n  const widthNumber = typeof width === \"number\" ? width : 200;\r\n  const shimmerWidth = widthNumber * 0.6;\r\n  const translateX = useSharedValue(-shimmerWidth);\r\n\r\n  useEffect(() => {\r\n    translateX.value = withRepeat(\r\n      withTiming(widthNumber + shimmerWidth, { duration: 1500 }),\r\n      -1,\r\n      false\r\n    );\r\n  }, []);\r\n\r\n  const animatedStyle = useAnimatedStyle(() => ({\r\n    transform: [{ translateX: translateX.value }],\r\n  }));\r\n\r\n  return (\r\n    <View\r\n      //@ts-ignore\r\n      style={cn(styles.root, { width, height, borderRadius: radius })}\r\n      {...props}\r\n    >\r\n      <Animated.View style={cn(styles.wrapper, animatedStyle)}>\r\n        <LinearGradient\r\n          colors={[theme.colors.ring, theme.colors.input, theme.colors.ring]}\r\n          start={{ x: 0, y: 0 }}\r\n          end={{ x: 1, y: 0 }}\r\n          style={[StyleSheet.absoluteFill, { width: \"100%\" }]}\r\n        />\r\n      </Animated.View>\r\n      <View style={styles.content}>{children}</View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport { Skeleton };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/slot.tsx",
      "content": "import { composeRefs } from \"native-variants\";\r\nimport {\r\n  cloneElement,\r\n  forwardRef,\r\n  isValidElement,\r\n  type ReactElement,\r\n} from \"react\";\r\n\r\nexport interface SlotProps {\r\n  children: ReactElement<any>;\r\n  [key: string]: any;\r\n}\r\n\r\nconst Slot = forwardRef<unknown, SlotProps>(function Slot(props, ref) {\r\n  const { children, ...restProps } = props;\r\n\r\n  if (!isValidElement(children)) {\r\n    console.warn(\"Slot requires a single valid React element as its child.\");\r\n    return null;\r\n  }\r\n\r\n  const childProps = children.props as Record<string, any>;\r\n  const childRef = (children as any).ref;\r\n\r\n  return cloneElement(children, {\r\n    ...restProps,\r\n    ref: composeRefs(childRef, ref),\r\n    style: [childProps.style, restProps.style].filter(Boolean),\r\n    className: [childProps.className, restProps.className]\r\n      .filter(Boolean)\r\n      .join(\" \"),\r\n  } as any);\r\n});\r\n\r\nexport { Slot };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/switch.tsx",
      "content": "import { type ComponentProps, memo, useEffect, useState } from \"react\";\r\nimport { Pressable, View, type ViewStyle, type StyleProp } from \"react-native\";\r\nimport Animated, {\r\n  useSharedValue,\r\n  useAnimatedStyle,\r\n  withTiming,\r\n  interpolateColor,\r\n  SharedValue,\r\n} from \"react-native-reanimated\";\r\nimport { styled, theme } from \"@/lib/nva\";\r\nimport { Styles, VariantProps } from \"native-variants\";\r\n\r\nconst TRACK_OFF = theme.colors.input;\r\nconst TRACK_ON = theme.colors.primary;\r\n\r\nconst switchVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"thumb\"],\r\n    base: {\r\n      root: {\r\n        width: 44,\r\n        height: 26,\r\n        paddingHorizontal: t.spacing[\"1\"] - 1,\r\n        borderRadius: t.radii.xl,\r\n        justifyContent: \"center\",\r\n      },\r\n      thumb: {\r\n        width: 20,\r\n        height: 20,\r\n        borderRadius: t.radii.full,\r\n        backgroundColor: t.colors.white,\r\n      },\r\n    },\r\n    variants: {\r\n      disabled: {\r\n        true: {\r\n          root: {\r\n            opacity: t.opacity[\"50\"],\r\n            pointerEvents: \"none\",\r\n            userSelect: \"none\",\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            opacity: t.opacity[\"100\"],\r\n            pointerEvents: \"auto\",\r\n            userSelect: \"auto\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      disabled: \"false\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction calcTravel(root?: Styles, thumb?: Styles) {\r\n  const pad = (root?.paddingHorizontal as number | undefined) ?? 4;\r\n  const rootW = (root?.width as number) ?? 52;\r\n  const thumbW = (thumb?.width as number) ?? 24;\r\n  return Math.max(rootW - thumbW - pad * 2, 0);\r\n}\r\n\r\nfunction useTrackAnimatedStyle(progress: SharedValue<number>) {\r\n  return useAnimatedStyle(() => {\r\n    const bg = interpolateColor(progress.value, [0, 1], [TRACK_OFF, TRACK_ON]);\r\n    return { backgroundColor: bg };\r\n  });\r\n}\r\n\r\nfunction useThumbAnimatedStyle(progress: SharedValue<number>, travel: number) {\r\n  return useAnimatedStyle(() => {\r\n    return { transform: [{ translateX: progress.value * travel }] };\r\n  });\r\n}\r\n\r\nfunction SwitchComponent({\r\n  style,\r\n  value,\r\n  defaultValue,\r\n  onChange,\r\n  disabled = false,\r\n  duration = 180,\r\n  hitSlop = 2,\r\n  ...props\r\n}: Omit<ComponentProps<typeof View>, \"onLayout\"> &\r\n  VariantProps<typeof switchVariants> & {\r\n    value?: boolean;\r\n    onChange?: (next: boolean) => void;\r\n    defaultValue?: boolean;\r\n    duration?: number;\r\n    style?: StyleProp<ViewStyle>;\r\n    hitSlop?:\r\n      | number\r\n      | { top?: number; right?: number; bottom?: number; left?: number };\r\n  }) {\r\n  const styles = switchVariants({ disabled });\r\n\r\n  const [internalValue, setInternalValue] = useState<boolean>(\r\n    value ?? defaultValue ?? false\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (value !== undefined) setInternalValue(value);\r\n  }, [value]);\r\n  const checked = internalValue;\r\n\r\n  const travel = calcTravel(styles.root, styles.thumb);\r\n\r\n  const progress = useSharedValue(checked ? 1 : 0);\r\n  useEffect(() => {\r\n    progress.value = withTiming(checked ? 1 : 0, { duration });\r\n  }, [checked, duration]);\r\n\r\n  const trackAnimatedStyle = useTrackAnimatedStyle(progress);\r\n  const thumbAnimatedStyle = useThumbAnimatedStyle(progress, travel);\r\n\r\n  const handleInternalChange = () => {\r\n    if (disabled) return;\r\n    const next = !checked;\r\n    onChange ? onChange(next) : setInternalValue(next);\r\n  };\r\n\r\n  return (\r\n    <Pressable\r\n      onPress={handleInternalChange}\r\n      hitSlop={hitSlop as any}\r\n      accessibilityRole=\"switch\"\r\n      accessibilityState={{ disabled: !!disabled, checked }}\r\n      style={style as any}\r\n      {...props}\r\n    >\r\n      <Animated.View style={[styles.root, trackAnimatedStyle]}>\r\n        <Animated.View style={[styles.thumb, thumbAnimatedStyle]} />\r\n      </Animated.View>\r\n    </Pressable>\r\n  );\r\n}\r\n\r\nconst Switch = memo(SwitchComponent);\r\n\r\nexport { Switch };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/tabs.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, useEffect, useState } from \"react\";\r\nimport { TouchableOpacity, View } from \"react-native\";\r\nimport { TypographyProvider } from \"./typography\";\r\nimport { composeText, createCTX } from \"native-variants\";\r\n\r\ntype CommonProps = {\r\n  value?: string;\r\n  onChange?: (input: string) => void;\r\n};\r\n\r\nconst { CTXProvider, useCTX } = createCTX<CommonProps>();\r\n\r\nconst tabsVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"list\", \"trigger\", \"content\"],\r\n    base: {\r\n      root: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n      },\r\n      list: {\r\n        height: 40,\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n      },\r\n      trigger: {\r\n        flex: 1,\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        textAlign: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"row\",\r\n        borderBottomWidth: 2,\r\n        fontSize: t.fontSizes.sm,\r\n        justifyContent: \"center\",\r\n        textAlignVertical: \"center\",\r\n      },\r\n      content: {},\r\n    },\r\n    variants: {\r\n      active: {\r\n        true: {\r\n          trigger: {\r\n            color: t.colors.primary,\r\n            borderColor: t.colors.primary,\r\n          },\r\n        },\r\n        false: {\r\n          trigger: {\r\n            color: t.colors.mutedForeground,\r\n            borderBottomColor: t.colors.input,\r\n          },\r\n        },\r\n      },\r\n      disabled: {\r\n        true: {\r\n          trigger: {\r\n            opacity: t.opacity[\"50\"],\r\n            pointerEvents: \"none\",\r\n            userSelect: \"none\",\r\n          },\r\n        },\r\n        false: {\r\n          trigger: {\r\n            opacity: t.opacity[\"100\"],\r\n            pointerEvents: \"auto\",\r\n            userSelect: \"auto\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      active: false,\r\n      disabled: false,\r\n    },\r\n  })\r\n);\r\n\r\nfunction Tabs({\r\n  style,\r\n  value,\r\n  onChange,\r\n  defaultValue,\r\n  ...props\r\n}: ComponentProps<typeof View> &\r\n  CommonProps & {\r\n    defaultValue?: string;\r\n  }) {\r\n  const styles = tabsVariants();\r\n\r\n  const [internalValue, setInternalValue] = useState<string | undefined>(\r\n    value ?? defaultValue\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (value !== undefined) setInternalValue(value);\r\n  }, [value]);\r\n\r\n  const handleInternalChange = (input: string) => {\r\n    if (onChange) {\r\n      onChange(input);\r\n    } else {\r\n      setInternalValue(input);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CTXProvider\r\n      props={{\r\n        value: internalValue,\r\n        onChange: handleInternalChange,\r\n      }}\r\n    >\r\n      <View style={cn(styles.root, style)} {...props} />\r\n    </CTXProvider>\r\n  );\r\n}\r\n\r\nfunction TabsTrigger({\r\n  style,\r\n  value,\r\n  disabled = false,\r\n  ...props\r\n}: ComponentProps<typeof TouchableOpacity> & {\r\n  value: string;\r\n}) {\r\n  const ctx = useCTX();\r\n  const styles = tabsVariants({ active: ctx?.value === value, disabled });\r\n\r\n  const handleInternalChange = () => {\r\n    if (value !== ctx?.value) {\r\n      ctx?.onChange?.(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TypographyProvider props={composeText(styles.trigger)}>\r\n      <TouchableOpacity\r\n        onPress={handleInternalChange}\r\n        style={cn(styles.trigger, style)}\r\n        {...props}\r\n      />\r\n    </TypographyProvider>\r\n  );\r\n}\r\n\r\nfunction TabsList({ style, ...props }: ComponentProps<typeof View>) {\r\n  const styles = tabsVariants();\r\n\r\n  return <View style={cn(styles.list, style)} {...props} />;\r\n}\r\n\r\nfunction TabsContent({\r\n  style,\r\n  value,\r\n  keepMounted = true,\r\n  children,\r\n  ...props\r\n}: ComponentProps<typeof View> & {\r\n  value: string;\r\n  keepMounted?: boolean;\r\n}) {\r\n  const ctx = useCTX();\r\n  const base = tabsVariants();\r\n  const isActive = ctx?.value === value;\r\n\r\n  if (keepMounted) {\r\n    return (\r\n      <View\r\n        style={cn(base.content, !isActive && { display: \"none\" }, style)}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (!isActive) return null;\r\n\r\n  return (\r\n    <View style={cn(base.content, style)} {...props}>\r\n      {children}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport { Tabs, TabsTrigger, TabsList, TabsContent };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/textarea.tsx",
      "content": "import { type ComponentProps, memo } from \"react\";\r\nimport { TextInput, View } from \"react-native\";\r\nimport { useInteractive } from \"@/hooks/use-interactive\";\r\nimport { cn } from \"@/lib/cn\";\r\nimport { styled, theme } from \"@/lib/nva\";\r\nimport { alpha, type VariantProps } from \"native-variants\";\r\n\r\nconst textAreaVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"field\", \"textarea\", \"icon\", \"placeholder\"],\r\n    base: {\r\n      root: {\r\n        minHeight: 120,\r\n        borderWidth: 1,\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        borderRadius: t.radii.lg,\r\n        paddingLeft: t.spacing[\"4\"],\r\n        justifyContent: \"flex-start\",\r\n        alignItems: \"flex-start\",\r\n      },\r\n      field: { flex: 1 },\r\n      textarea: {\r\n        flex: 1,\r\n        height: \"100%\",\r\n        textAlignVertical: \"top\",\r\n        paddingRight: t.spacing[\"4\"],\r\n        paddingTop: theme?.spacing[\"2\"],\r\n        borderTopEndRadius: t.radii.lg,\r\n        borderBottomEndRadius: t.radii.lg,\r\n      },\r\n      placeholder: {\r\n        color: t.colors.mutedForeground,\r\n      },\r\n    },\r\n    variants: {\r\n      focus: {\r\n        true: {\r\n          root: {\r\n            borderColor: t.colors.ring,\r\n            backgroundColor: t.colors.transparent,\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            borderColor: t.colors.input,\r\n            backgroundColor: alpha(t.colors.input, 30),\r\n          },\r\n        },\r\n      },\r\n      size: {\r\n        default: {\r\n          root: { height: 40 },\r\n        },\r\n        lg: {\r\n          root: { height: 46 },\r\n        },\r\n      },\r\n      disabled: {\r\n        true: {\r\n          root: {\r\n            opacity: t.opacity[\"50\"],\r\n            pointerEvents: \"none\",\r\n            userSelect: \"none\",\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            opacity: t.opacity[\"100\"],\r\n            pointerEvents: \"auto\",\r\n            userSelect: \"auto\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n      focus: false,\r\n      disabled: false,\r\n    },\r\n  })\r\n);\r\n\r\nfunction TextAreaComponent({\r\n  style,\r\n  disabled,\r\n  ...props\r\n}: Omit<ComponentProps<typeof TextInput>, \"editable\"> &\r\n  VariantProps<typeof textAreaVariants>) {\r\n  const { focus, onFocus, onBlur } = useInteractive();\r\n  const { root, textarea, placeholder } = textAreaVariants({ focus, disabled });\r\n\r\n  return (\r\n    <View style={cn(root, style) as any}>\r\n      <TextInput\r\n        multiline\r\n        onBlur={onBlur}\r\n        onFocus={onFocus}\r\n        editable={!disabled}\r\n        placeholderTextColor={placeholder?.color}\r\n        style={cn(textarea, style, {\r\n          height: \"100%\",\r\n          textAlignVertical: \"top\",\r\n        })}\r\n        {...props}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst TextArea = memo(TextAreaComponent);\r\n\r\nexport { TextArea };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src/components/typography.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { createCTX, type VariantProps } from \"native-variants\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, memo } from \"react\";\r\nimport { type StyleProp, Text, type TextStyle } from \"react-native\";\r\n\r\nconst typographyVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\"],\r\n    base: {\r\n      root: {\r\n        letterSpacing: -0.05,\r\n        color: t.colors.foreground,\r\n      },\r\n    },\r\n    variants: {\r\n      as: {\r\n        xxs: {\r\n          root: {\r\n            fontSize: t.fontSizes.xxs,\r\n            fontWeight: \"400\",\r\n          },\r\n        },\r\n        xs: {\r\n          root: {\r\n            fontSize: t.fontSizes.xs,\r\n            fontWeight: \"400\",\r\n          },\r\n        },\r\n        sm: {\r\n          root: {\r\n            fontSize: t.fontSizes.sm,\r\n            fontWeight: \"400\",\r\n          },\r\n        },\r\n        base: {\r\n          root: {\r\n            fontSize: t.fontSizes.base,\r\n            fontWeight: \"500\",\r\n          },\r\n        },\r\n        lg: {\r\n          root: {\r\n            fontSize: t.fontSizes.lg,\r\n            fontWeight: \"500\",\r\n          },\r\n        },\r\n        xl: {\r\n          root: {\r\n            fontSize: t.fontSizes.xl,\r\n            fontWeight: \"600\",\r\n          },\r\n        },\r\n        \"2xl\": {\r\n          root: {\r\n            fontSize: t.fontSizes[\"2xl\"],\r\n            fontWeight: \"600\",\r\n          },\r\n        },\r\n        \"3xl\": {\r\n          root: {\r\n            fontSize: t.fontSizes[\"3xl\"],\r\n            fontWeight: \"600\",\r\n          },\r\n        },\r\n        \"4xl\": {\r\n          root: {\r\n            fontSize: t.fontSizes[\"4xl\"],\r\n            fontWeight: \"700\",\r\n          },\r\n        },\r\n        \"5xl\": {\r\n          root: {\r\n            fontSize: t.fontSizes[\"5xl\"],\r\n            fontWeight: \"700\",\r\n          },\r\n        },\r\n        \"6xl\": {\r\n          root: {\r\n            fontSize: t.fontSizes[\"6xl\"],\r\n            fontWeight: \"700\",\r\n          },\r\n        },\r\n      },\r\n      textCase: {\r\n        uppercase: {\r\n          root: {\r\n            textTransform: \"uppercase\",\r\n          },\r\n        },\r\n        lowercase: {\r\n          root: {\r\n            textTransform: \"lowercase\",\r\n          },\r\n        },\r\n        capitalize: {\r\n          root: {\r\n            textTransform: \"capitalize\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      as: \"sm\",\r\n      textCase: \"capitalize\",\r\n    },\r\n  })\r\n);\r\n\r\nconst { CTXProvider: TypographyProvider, useCTX: useTypography } =\r\n  createCTX<StyleProp<TextStyle>>();\r\n\r\nfunction TypographyComponent({\r\n  as,\r\n  textCase,\r\n  style,\r\n  ...props\r\n}: ComponentProps<typeof Text> & VariantProps<typeof typographyVariants>) {\r\n  const ctx = useTypography();\r\n  const styles = typographyVariants({ as, textCase });\r\n\r\n  return <Text style={cn(styles.root, ctx, style)} {...props} />;\r\n}\r\n\r\nconst Typography = memo(TypographyComponent);\r\n\r\nexport { Typography, TypographyProvider, useTypography };\r\n",
      "type": "registry:ui"
    }
  ]
}