{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select",
  "type": "registry:ui",
  "title": "select",
  "description": "Select component",
  "files": [
    {
      "path": "packages/ui/src/components/select.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport {\r\n  alpha,\r\n  composeText,\r\n  createCTX,\r\n  type VariantProps,\r\n} from \"native-variants\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, useState } from \"react\";\r\nimport { ScrollView, Text, TouchableOpacity, View } from \"react-native\";\r\nimport { TypographyProvider } from \"./typography\";\r\nimport { Icon } from \"./icon\";\r\n\r\ntype CommonProps = {\r\n  value?: string;\r\n  onChange?: (input: string) => void;\r\n};\r\n\r\nconst { CTXProvider, useCTX } = createCTX<\r\n  VariantProps<typeof selectVariants> & CommonProps\r\n>();\r\n\r\nconst selectVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\r\n      \"root\",\r\n      \"wrapper\",\r\n      \"content\",\r\n      \"trigger\",\r\n      \"indicator\",\r\n      \"item\",\r\n      \"group\",\r\n      \"label\",\r\n    ],\r\n    base: {\r\n      root: {\r\n        maxHeight: 250,\r\n      },\r\n      wrapper: {\r\n        display: \"flex\",\r\n        gap: t.spacing[\"2\"],\r\n        flexDirection: \"column\",\r\n      },\r\n      trigger: {\r\n        height: 40,\r\n        display: \"flex\",\r\n        fontWeight: \"400\",\r\n        overflow: \"hidden\",\r\n        textAlign: \"center\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        borderRadius: t.radii.lg,\r\n\r\n        textAlignVertical: \"center\",\r\n        justifyContent: \"space-between\",\r\n      },\r\n      content: {\r\n        display: \"flex\",\r\n        gap: t.spacing[\"2\"],\r\n        flexDirection: \"column\",\r\n      },\r\n      item: {\r\n        flex: 1,\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        gap: t.spacing[\"2\"],\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        fontSize: t.fontSizes.sm,\r\n        paddingHorizontal: t.spacing[\"3.5\"],\r\n      },\r\n      indicator: {\r\n        marginLeft: \"auto\",\r\n      },\r\n      group: {\r\n        display: \"flex\",\r\n        gap: t.spacing[\"3.5\"],\r\n        flexDirection: \"column\",\r\n      },\r\n      label: {\r\n        position: \"static\",\r\n        fontSize: t.fontSizes.sm,\r\n        color: t.colors.primary,\r\n        fontWeight: \"500\",\r\n      },\r\n    },\r\n    variants: {\r\n      active: {\r\n        true: {\r\n          item: {\r\n            color: t.colors.primary,\r\n            backgroundColor: alpha(t.colors.primary, 5),\r\n          },\r\n          indicator: {\r\n            color: t.colors.primary,\r\n          },\r\n        },\r\n        false: {\r\n          item: {\r\n            color: t.colors.mutedForeground,\r\n            backgroundColor: t.colors.background,\r\n          },\r\n        },\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nfunction Select({\r\n  style,\r\n  value,\r\n  onChange,\r\n  defaultValue,\r\n  ...props\r\n}: ComponentProps<typeof View> &\r\n  CommonProps & {\r\n    defaultValue?: string;\r\n  }) {\r\n  const styles = selectVariants();\r\n\r\n  const [internalValue, setInternalValue] = useState<string | undefined>(\r\n    defaultValue\r\n  );\r\n\r\n  const selectedValue = value ?? internalValue;\r\n\r\n  function handleChange(newValue: string) {\r\n    setInternalValue(newValue);\r\n    if (onChange) onChange(newValue);\r\n  }\r\n\r\n  return (\r\n    <CTXProvider props={{ value: selectedValue, onChange: handleChange }}>\r\n      <ScrollView\r\n        style={cn(styles.root, style)}\r\n        contentContainerStyle={styles.wrapper}\r\n        {...props}\r\n      />\r\n    </CTXProvider>\r\n  );\r\n}\r\n\r\nfunction SelectItem({\r\n  value,\r\n  style,\r\n  children,\r\n  ...props\r\n}: ComponentProps<typeof TouchableOpacity> & Pick<CommonProps, \"value\">) {\r\n  const ctx = useCTX();\r\n  const active = ctx?.value === value;\r\n\r\n  const styles = selectVariants({ active });\r\n\r\n  return (\r\n    <TypographyProvider props={composeText(styles.item)}>\r\n      <TouchableOpacity\r\n        onPress={() => ctx?.onChange && ctx?.onChange(value!)}\r\n        style={cn(styles.trigger, style)}\r\n        {...props}\r\n      >\r\n        <View style={styles.item}>\r\n          {children}\r\n          {active && <Icon style={styles.indicator} name=\"check\" />}\r\n        </View>\r\n      </TouchableOpacity>\r\n    </TypographyProvider>\r\n  );\r\n}\r\n\r\nfunction SelectGroup({ style, ...props }: ComponentProps<typeof View>) {\r\n  const styles = selectVariants();\r\n\r\n  return <View style={cn(styles.group, style)} {...props} />;\r\n}\r\n\r\nfunction SelectContent({ style, ...props }: ComponentProps<typeof View>) {\r\n  const styles = selectVariants();\r\n\r\n  return <View style={cn(styles.content, style)} {...props} />;\r\n}\r\n\r\nfunction SelectLabel({ style, ...props }: ComponentProps<typeof Text>) {\r\n  const styles = selectVariants();\r\n\r\n  return <Text style={cn(styles.label, style)} {...props} />;\r\n}\r\n\r\nexport { Select, SelectItem, SelectGroup, SelectLabel, SelectContent };\r\n",
      "type": "registry:ui"
    }
  ]
}