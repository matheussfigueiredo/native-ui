{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "switch",
  "type": "registry:ui",
  "title": "switch",
  "description": "Switch component",
  "dependencies": ["react-native", "native-variants", "react"],
  "files": [
    {
      "path": "components/ui/switch.tsx",
      "content": "import { type ComponentProps, memo, useEffect, useState } from \"react\";\r\nimport { Pressable, View, type ViewStyle, type StyleProp } from \"react-native\";\r\nimport Animated, {\r\n  useSharedValue,\r\n  useAnimatedStyle,\r\n  withTiming,\r\n  interpolateColor,\r\n  SharedValue,\r\n} from \"react-native-reanimated\";\r\nimport { styled, theme } from \"@/lib/nva\";\r\nimport { Styles, VariantProps } from \"native-variants\";\r\n\r\nconst TRACK_OFF = theme.colors.input;\r\nconst TRACK_ON = theme.colors.primary;\r\n\r\nconst switchVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"thumb\"],\r\n    base: {\r\n      root: {\r\n        width: 44,\r\n        height: 26,\r\n        paddingHorizontal: t.spacing[\"1\"] - 1,\r\n        borderRadius: t.radii.xl,\r\n        justifyContent: \"center\",\r\n      },\r\n      thumb: {\r\n        width: 20,\r\n        height: 20,\r\n        borderRadius: t.radii.full,\r\n        backgroundColor: t.colors.white,\r\n      },\r\n    },\r\n    variants: {\r\n      disabled: {\r\n        true: {\r\n          root: {\r\n            opacity: t.opacity[\"50\"],\r\n            pointerEvents: \"none\",\r\n            userSelect: \"none\",\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            opacity: t.opacity[\"100\"],\r\n            pointerEvents: \"auto\",\r\n            userSelect: \"auto\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      disabled: \"false\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction calcTravel(root?: Styles, thumb?: Styles) {\r\n  const pad = (root?.paddingHorizontal as number | undefined) ?? 4;\r\n  const rootW = (root?.width as number) ?? 52;\r\n  const thumbW = (thumb?.width as number) ?? 24;\r\n  return Math.max(rootW - thumbW - pad * 2, 0);\r\n}\r\n\r\nfunction useTrackAnimatedStyle(progress: SharedValue<number>) {\r\n  return useAnimatedStyle(() => {\r\n    const bg = interpolateColor(progress.value, [0, 1], [TRACK_OFF, TRACK_ON]);\r\n    return { backgroundColor: bg };\r\n  });\r\n}\r\n\r\nfunction useThumbAnimatedStyle(progress: SharedValue<number>, travel: number) {\r\n  return useAnimatedStyle(() => {\r\n    return { transform: [{ translateX: progress.value * travel }] };\r\n  });\r\n}\r\n\r\nfunction SwitchComponent({\r\n  style,\r\n  value,\r\n  defaultValue,\r\n  onChange,\r\n  disabled = false,\r\n  duration = 180,\r\n  hitSlop = 2,\r\n  ...props\r\n}: Omit<ComponentProps<typeof View>, \"onLayout\"> &\r\n  VariantProps<typeof switchVariants> & {\r\n    value?: boolean;\r\n    onChange?: (next: boolean) => void;\r\n    defaultValue?: boolean;\r\n    duration?: number;\r\n    style?: StyleProp<ViewStyle>;\r\n    hitSlop?:\r\n      | number\r\n      | { top?: number; right?: number; bottom?: number; left?: number };\r\n  }) {\r\n  const styles = switchVariants({ disabled });\r\n\r\n  const [internalValue, setInternalValue] = useState<boolean>(\r\n    value ?? defaultValue ?? false\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (value !== undefined) setInternalValue(value);\r\n  }, [value]);\r\n  const checked = internalValue;\r\n\r\n  const travel = calcTravel(styles.root, styles.thumb);\r\n\r\n  const progress = useSharedValue(checked ? 1 : 0);\r\n  useEffect(() => {\r\n    progress.value = withTiming(checked ? 1 : 0, { duration });\r\n  }, [checked, duration]);\r\n\r\n  const trackAnimatedStyle = useTrackAnimatedStyle(progress);\r\n  const thumbAnimatedStyle = useThumbAnimatedStyle(progress, travel);\r\n\r\n  const handleInternalChange = () => {\r\n    if (disabled) return;\r\n    const next = !checked;\r\n    onChange ? onChange(next) : setInternalValue(next);\r\n  };\r\n\r\n  return (\r\n    <Pressable\r\n      onPress={handleInternalChange}\r\n      hitSlop={hitSlop as any}\r\n      accessibilityRole=\"switch\"\r\n      accessibilityState={{ disabled: !!disabled, checked }}\r\n      style={style as any}\r\n      {...props}\r\n    >\r\n      <Animated.View style={[styles.root, trackAnimatedStyle]}>\r\n        <Animated.View style={[styles.thumb, thumbAnimatedStyle]} />\r\n      </Animated.View>\r\n    </Pressable>\r\n  );\r\n}\r\n\r\nconst Switch = memo(SwitchComponent);\r\n\r\nexport { Switch };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "lib/nva.ts",
      "content": "import { createNVA } from \"native-variants\";\r\n\r\nexport const { styled, theme } = createNVA({\r\n  theme: {\r\n    colors: {\r\n      background: \"#ffffff\",\r\n      foreground: \"#262626\",\r\n      card: \"#ffffff\",\r\n      cardForeground: \"#262626\",\r\n      popover: \"#ffffff\",\r\n      popoverForeground: \"#262626\",\r\n      primary: \"#535353\",\r\n      primaryForeground: \"#fbfbfb\",\r\n      secondary: \"#f7f7f7\",\r\n      secondaryForeground: \"#535353\",\r\n      muted: \"#f7f7f7\",\r\n      mutedForeground: \"#8e8e8e\",\r\n      accent: \"#f7f7f7\",\r\n      accentForeground: \"#535353\",\r\n      destructive: \"#c43d40\",\r\n      border: \"#ebebeb\",\r\n      input: \"#ebebeb\",\r\n      ring: \"#b5b5b5\",\r\n      white: \"#ffffff\",\r\n      black: \"#000000\",\r\n      transparent: \"transparent\",\r\n    },\r\n    radii: {\r\n      none: 2,\r\n      sm: 2,\r\n      base: 4,\r\n      md: 6,\r\n      lg: 8,\r\n      xl: 16,\r\n      full: 9999,\r\n    },\r\n    fontSizes: {\r\n      xxs: 12,\r\n      xs: 14,\r\n      sm: 16,\r\n      base: 18,\r\n      lg: 20,\r\n      xl: 24,\r\n      \"2xl\": 28,\r\n      \"3xl\": 30,\r\n      \"4xl\": 34,\r\n      \"5xl\": 38,\r\n      \"6xl\": 40,\r\n    },\r\n    fontWeights: {\r\n      thin: \"100\",\r\n      extraLight: \"200\",\r\n      light: \"300\",\r\n      normal: \"400\",\r\n      medium: \"500\",\r\n      semiBold: \"600\",\r\n      bold: \"700\",\r\n      extraBold: \"800\",\r\n      black: \"900\",\r\n    },\r\n    lineHeights: {\r\n      none: 1,\r\n      tight: 1.25,\r\n      snug: 1.375,\r\n      normal: 1.5,\r\n      relaxed: 1.625,\r\n      loose: 2,\r\n    },\r\n    spacing: {\r\n      0: 0,\r\n      px: 1,\r\n      0.5: 2,\r\n      1: 4,\r\n      1.5: 6,\r\n      2: 8,\r\n      2.5: 10,\r\n      3: 12,\r\n      3.5: 14,\r\n      4: 16,\r\n      5: 20,\r\n      6: 24,\r\n      7: 28,\r\n      8: 32,\r\n      9: 36,\r\n      10: 40,\r\n      11: 44,\r\n      12: 48,\r\n      14: 56,\r\n      16: 64,\r\n      20: 80,\r\n      \"1/2\": \"50%\",\r\n      \"1/3\": \"33.333%\",\r\n      \"2/3\": \"66.666%\",\r\n      \"1/4\": \"25%\",\r\n      \"2/4\": \"50%\",\r\n      \"3/4\": \"75%\",\r\n      full: \"100%\",\r\n    },\r\n    zIndex: {\r\n      1: 1,\r\n      10: 10,\r\n      20: 20,\r\n      30: 30,\r\n      40: 40,\r\n      50: 50,\r\n      99999: 9999,\r\n    },\r\n    opacity: {\r\n      0: 0,\r\n      25: 0.25,\r\n      50: 0.5,\r\n      75: 0.75,\r\n      100: 1,\r\n    },\r\n  },\r\n});\r\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { StyleProp } from \"react-native\";\r\n\r\nfunction flattenStyle<T>(style: StyleProp<T>): T[] {\r\n  if (!style) return [];\r\n  if (Array.isArray(style)) {\r\n    return style.flat\r\n      ? (style.flat().filter(Boolean) as T[])\r\n      : (style.filter(Boolean) as T[]);\r\n  }\r\n  // @ts-ignore\r\n  return [style];\r\n}\r\n\r\nexport function cn<T extends object>(...styles: StyleProp<T>[]): T {\r\n  return styles\r\n    .flatMap(flattenStyle)\r\n    .filter((s): s is T => !!s)\r\n    .reduce<T>((acc, style) => ({ ...acc, ...style }), {} as T);\r\n}\r\n",
      "type": "registry:lib"
    }
  ]
}
