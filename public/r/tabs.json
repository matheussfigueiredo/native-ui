{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:ui",
  "title": "tabs",
  "description": "Tabs component",
  "dependencies": ["react-native", "native-variants", "react"],
  "files": [
    {
      "path": "components/ui/tabs.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, useEffect, useState } from \"react\";\r\nimport { TouchableOpacity, View } from \"react-native\";\r\nimport { TypographyProvider } from \"./typography\";\r\nimport { composeText, createCTX } from \"native-variants\";\r\n\r\ntype CommonProps = {\r\n  value?: string;\r\n  onChange?: (input: string) => void;\r\n};\r\n\r\nconst { CTXProvider, useCTX } = createCTX<CommonProps>();\r\n\r\nconst tabsVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"list\", \"trigger\", \"content\"],\r\n    base: {\r\n      root: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n      },\r\n      list: {\r\n        height: 40,\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n      },\r\n      trigger: {\r\n        flex: 1,\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        textAlign: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"row\",\r\n        borderBottomWidth: 2,\r\n        fontSize: t.fontSizes.sm,\r\n        justifyContent: \"center\",\r\n        textAlignVertical: \"center\",\r\n      },\r\n      content: {},\r\n    },\r\n    variants: {\r\n      active: {\r\n        true: {\r\n          trigger: {\r\n            color: t.colors.primary,\r\n            borderColor: t.colors.primary,\r\n          },\r\n        },\r\n        false: {\r\n          trigger: {\r\n            color: t.colors.mutedForeground,\r\n            borderBottomColor: t.colors.input,\r\n          },\r\n        },\r\n      },\r\n      disabled: {\r\n        true: {\r\n          trigger: {\r\n            opacity: t.opacity[\"50\"],\r\n            pointerEvents: \"none\",\r\n            userSelect: \"none\",\r\n          },\r\n        },\r\n        false: {\r\n          trigger: {\r\n            opacity: t.opacity[\"100\"],\r\n            pointerEvents: \"auto\",\r\n            userSelect: \"auto\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      active: false,\r\n      disabled: false,\r\n    },\r\n  })\r\n);\r\n\r\nfunction Tabs({\r\n  style,\r\n  value,\r\n  onChange,\r\n  defaultValue,\r\n  ...props\r\n}: ComponentProps<typeof View> &\r\n  CommonProps & {\r\n    defaultValue?: string;\r\n  }) {\r\n  const styles = tabsVariants();\r\n\r\n  const [internalValue, setInternalValue] = useState<string | undefined>(\r\n    value ?? defaultValue\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (value !== undefined) setInternalValue(value);\r\n  }, [value]);\r\n\r\n  const handleInternalChange = (input: string) => {\r\n    if (onChange) {\r\n      onChange(input);\r\n    } else {\r\n      setInternalValue(input);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CTXProvider\r\n      props={{\r\n        value: internalValue,\r\n        onChange: handleInternalChange,\r\n      }}\r\n    >\r\n      <View style={cn(styles.root, style)} {...props} />\r\n    </CTXProvider>\r\n  );\r\n}\r\n\r\nfunction TabsTrigger({\r\n  style,\r\n  value,\r\n  disabled = false,\r\n  ...props\r\n}: ComponentProps<typeof TouchableOpacity> & {\r\n  value: string;\r\n}) {\r\n  const ctx = useCTX();\r\n  const styles = tabsVariants({ active: ctx?.value === value, disabled });\r\n\r\n  const handleInternalChange = () => {\r\n    if (value !== ctx?.value) {\r\n      ctx?.onChange?.(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TypographyProvider props={composeText(styles.trigger)}>\r\n      <TouchableOpacity\r\n        onPress={handleInternalChange}\r\n        style={cn(styles.trigger, style)}\r\n        {...props}\r\n      />\r\n    </TypographyProvider>\r\n  );\r\n}\r\n\r\nfunction TabsList({ style, ...props }: ComponentProps<typeof View>) {\r\n  const styles = tabsVariants();\r\n\r\n  return <View style={cn(styles.list, style)} {...props} />;\r\n}\r\n\r\nfunction TabsContent({\r\n  style,\r\n  value,\r\n  keepMounted = true,\r\n  children,\r\n  ...props\r\n}: ComponentProps<typeof View> & {\r\n  value: string;\r\n  keepMounted?: boolean;\r\n}) {\r\n  const ctx = useCTX();\r\n  const base = tabsVariants();\r\n  const isActive = ctx?.value === value;\r\n\r\n  if (keepMounted) {\r\n    return (\r\n      <View\r\n        style={cn(base.content, !isActive && { display: \"none\" }, style)}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (!isActive) return null;\r\n\r\n  return (\r\n    <View style={cn(base.content, style)} {...props}>\r\n      {children}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport { Tabs, TabsTrigger, TabsList, TabsContent };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "lib/nva.ts",
      "content": "import { createNVA } from \"native-variants\";\r\n\r\nexport const { styled, theme } = createNVA({\r\n  theme: {\r\n    colors: {\r\n      background: \"#ffffff\",\r\n      foreground: \"#262626\",\r\n      card: \"#ffffff\",\r\n      cardForeground: \"#262626\",\r\n      popover: \"#ffffff\",\r\n      popoverForeground: \"#262626\",\r\n      primary: \"#535353\",\r\n      primaryForeground: \"#fbfbfb\",\r\n      secondary: \"#f7f7f7\",\r\n      secondaryForeground: \"#535353\",\r\n      muted: \"#f7f7f7\",\r\n      mutedForeground: \"#8e8e8e\",\r\n      accent: \"#f7f7f7\",\r\n      accentForeground: \"#535353\",\r\n      destructive: \"#c43d40\",\r\n      border: \"#ebebeb\",\r\n      input: \"#ebebeb\",\r\n      ring: \"#b5b5b5\",\r\n      white: \"#ffffff\",\r\n      black: \"#000000\",\r\n      transparent: \"transparent\",\r\n    },\r\n    radii: {\r\n      none: 2,\r\n      sm: 2,\r\n      base: 4,\r\n      md: 6,\r\n      lg: 8,\r\n      xl: 16,\r\n      full: 9999,\r\n    },\r\n    fontSizes: {\r\n      xxs: 12,\r\n      xs: 14,\r\n      sm: 16,\r\n      base: 18,\r\n      lg: 20,\r\n      xl: 24,\r\n      \"2xl\": 28,\r\n      \"3xl\": 30,\r\n      \"4xl\": 34,\r\n      \"5xl\": 38,\r\n      \"6xl\": 40,\r\n    },\r\n    fontWeights: {\r\n      thin: \"100\",\r\n      extraLight: \"200\",\r\n      light: \"300\",\r\n      normal: \"400\",\r\n      medium: \"500\",\r\n      semiBold: \"600\",\r\n      bold: \"700\",\r\n      extraBold: \"800\",\r\n      black: \"900\",\r\n    },\r\n    lineHeights: {\r\n      none: 1,\r\n      tight: 1.25,\r\n      snug: 1.375,\r\n      normal: 1.5,\r\n      relaxed: 1.625,\r\n      loose: 2,\r\n    },\r\n    spacing: {\r\n      0: 0,\r\n      px: 1,\r\n      0.5: 2,\r\n      1: 4,\r\n      1.5: 6,\r\n      2: 8,\r\n      2.5: 10,\r\n      3: 12,\r\n      3.5: 14,\r\n      4: 16,\r\n      5: 20,\r\n      6: 24,\r\n      7: 28,\r\n      8: 32,\r\n      9: 36,\r\n      10: 40,\r\n      11: 44,\r\n      12: 48,\r\n      14: 56,\r\n      16: 64,\r\n      20: 80,\r\n      \"1/2\": \"50%\",\r\n      \"1/3\": \"33.333%\",\r\n      \"2/3\": \"66.666%\",\r\n      \"1/4\": \"25%\",\r\n      \"2/4\": \"50%\",\r\n      \"3/4\": \"75%\",\r\n      full: \"100%\",\r\n    },\r\n    zIndex: {\r\n      1: 1,\r\n      10: 10,\r\n      20: 20,\r\n      30: 30,\r\n      40: 40,\r\n      50: 50,\r\n      99999: 9999,\r\n    },\r\n    opacity: {\r\n      0: 0,\r\n      25: 0.25,\r\n      50: 0.5,\r\n      75: 0.75,\r\n      100: 1,\r\n    },\r\n  },\r\n});\r\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { StyleProp } from \"react-native\";\r\n\r\nfunction flattenStyle<T>(style: StyleProp<T>): T[] {\r\n  if (!style) return [];\r\n  if (Array.isArray(style)) {\r\n    return style.flat\r\n      ? (style.flat().filter(Boolean) as T[])\r\n      : (style.filter(Boolean) as T[]);\r\n  }\r\n  // @ts-ignore\r\n  return [style];\r\n}\r\n\r\nexport function cn<T extends object>(...styles: StyleProp<T>[]): T {\r\n  return styles\r\n    .flatMap(flattenStyle)\r\n    .filter((s): s is T => !!s)\r\n    .reduce<T>((acc, style) => ({ ...acc, ...style }), {} as T);\r\n}\r\n",
      "type": "registry:lib"
    }
  ]
}
