{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input",
  "type": "registry:ui",
  "title": "input",
  "description": "Input component",
  "files": [
    {
      "path": "packages/ui/src/components/input.tsx",
      "content": "import { type ComponentProps, memo } from \"react\";\r\nimport { type StyleProp, TextInput, type TextStyle, View } from \"react-native\";\r\nimport { type VariantProps, alpha } from \"native-variants\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { useInteractive } from \"@/hooks/use-interactive\";\r\nimport { cn } from \"@/lib/cn\";\r\n\r\nconst inputVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"field\", \"input\", \"icon\", \"placeholder\"],\r\n    base: {\r\n      root: {\r\n        borderWidth: 1,\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        borderRadius: t.radii.lg,\r\n      },\r\n      field: { flex: 1 },\r\n      input: {\r\n        flex: 1,\r\n        borderTopEndRadius: t.radii.lg,\r\n        borderBottomEndRadius: t.radii.lg,\r\n        paddingHorizontal: t.spacing[\"4\"],\r\n        textAlignVertical: \"center\",\r\n      },\r\n      placeholder: {\r\n        color: t.colors.mutedForeground,\r\n      },\r\n    },\r\n    variants: {\r\n      focus: {\r\n        true: {\r\n          root: {\r\n            borderColor: t.colors.ring,\r\n            backgroundColor: t.colors.transparent,\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            borderColor: t.colors.input,\r\n            backgroundColor: alpha(t.colors.input, 30),\r\n          },\r\n        },\r\n      },\r\n      size: {\r\n        default: {\r\n          root: { height: 40 },\r\n          field: { height: 40 },\r\n        },\r\n        lg: {\r\n          root: { height: 46 },\r\n          field: { height: 46 },\r\n        },\r\n      },\r\n      disabled: {\r\n        true: {\r\n          root: {\r\n            opacity: t.opacity[\"50\"],\r\n            pointerEvents: \"none\",\r\n            userSelect: \"none\",\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            opacity: t.opacity[\"100\"],\r\n            pointerEvents: \"auto\",\r\n            userSelect: \"auto\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n      focus: false,\r\n      disabled: false,\r\n    },\r\n  })\r\n);\r\n\r\nfunction InputComponent({\r\n  style,\r\n  size,\r\n  onChange,\r\n  fieldStyle,\r\n  disabled,\r\n  children,\r\n  ...props\r\n}: Omit<ComponentProps<typeof TextInput>, \"editable\"> &\r\n  VariantProps<typeof inputVariants> & {\r\n    onChange?: (input: string) => void;\r\n    fieldStyle?: StyleProp<TextStyle>;\r\n  }) {\r\n  const { focus, onFocus, onBlur } = useInteractive();\r\n  const { root, field, input, placeholder } = inputVariants({\r\n    size,\r\n    focus,\r\n    disabled,\r\n  });\r\n\r\n  return (\r\n    <View style={cn(root, style as any)}>\r\n      <View style={field}>\r\n        <TextInput\r\n          style={cn(input, fieldStyle)}\r\n          onBlur={onBlur}\r\n          onFocus={onFocus}\r\n          onChangeText={onChange}\r\n          editable={!disabled}\r\n          placeholderTextColor={placeholder?.color}\r\n          {...props}\r\n        />\r\n      </View>\r\n      {children}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst Input = memo(InputComponent);\r\n\r\nexport { Input };\r\n",
      "type": "registry:ui"
    }
  ]
}