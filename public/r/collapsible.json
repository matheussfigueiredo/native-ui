{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "collapsible",
  "type": "registry:ui",
  "title": "collapsible",
  "description": "Collapsible component",
  "files": [
    {
      "path": "packages/ui/src/components/collapsible.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, useState } from \"react\";\r\nimport {\r\n  type GestureResponderEvent,\r\n  type LayoutChangeEvent,\r\n  View,\r\n} from \"react-native\";\r\nimport Animated, {\r\n  useAnimatedStyle,\r\n  useSharedValue,\r\n  withTiming,\r\n} from \"react-native-reanimated\";\r\nimport { Slot } from \"./slot\";\r\nimport { Button } from \"./button\";\r\nimport { createCTX } from \"native-variants\";\r\n\r\ntype CommonProps = {\r\n  onChange?: VoidFunction;\r\n  value?: boolean;\r\n  duration?: number;\r\n  minHeight?: number;\r\n};\r\n\r\nconst { CTXProvider, useCTX } = createCTX<CommonProps>();\r\n\r\nconst collapsibleVariants = styled((ctx, _) =>\r\n  ctx({\r\n    slots: [\"root\", \"content\"],\r\n    base: {\r\n      root: {\r\n        overflow: \"hidden\",\r\n        width: \"100%\",\r\n      },\r\n      content: {\r\n        position: \"absolute\",\r\n        height: \"auto\",\r\n        width: \"100%\",\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nfunction Collapsible({\r\n  style,\r\n  value,\r\n  onChange,\r\n  minHeight = 0,\r\n  duration = 400,\r\n  defaultValue = false,\r\n  children,\r\n  ...props\r\n}: ComponentProps<typeof View> &\r\n  CommonProps & {\r\n    defaultValue?: boolean;\r\n    children: React.ReactNode;\r\n  }) {\r\n  const styles = collapsibleVariants({});\r\n  const [internalValue, setInternalValue] = useState<boolean>(\r\n    value ?? defaultValue\r\n  );\r\n\r\n  const handleInternalChange = () => {\r\n    if (onChange) {\r\n      onChange();\r\n    } else {\r\n      setInternalValue((prevState) => !prevState);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CTXProvider\r\n      props={{\r\n        value: value ?? internalValue,\r\n        onChange: handleInternalChange,\r\n        duration,\r\n        minHeight,\r\n      }}\r\n    >\r\n      <View style={cn(styles.root, style)} {...props}>\r\n        {children}\r\n      </View>\r\n    </CTXProvider>\r\n  );\r\n}\r\n\r\nfunction CollapsibleTrigger({\r\n  asChild = false,\r\n  variant,\r\n  size,\r\n  disabled,\r\n  onPress,\r\n  ...props\r\n}: ComponentProps<typeof Button> & {\r\n  asChild?: boolean;\r\n}) {\r\n  const ctx = useCTX();\r\n  const Comp = asChild ? Slot : Button;\r\n\r\n  const onToggle = (event: GestureResponderEvent) => {\r\n    if (onPress) {\r\n      onPress(event);\r\n    }\r\n\r\n    ctx?.onChange?.();\r\n  };\r\n\r\n  return <Comp onPress={onToggle} {...props} />;\r\n}\r\n\r\nfunction CollapsibleContent({ style, ...props }: ComponentProps<typeof View>) {\r\n  const ctx = useCTX();\r\n  const styles = collapsibleVariants({});\r\n  const animatedHeight = useSharedValue(0);\r\n  const [height, setHeight] = useState<number>(0);\r\n\r\n  const onLayout = (event: LayoutChangeEvent) => {\r\n    const onLayoutHeight = event.nativeEvent.layout.height;\r\n\r\n    if (onLayoutHeight > 0 && height !== onLayoutHeight) {\r\n      setHeight(onLayoutHeight);\r\n    }\r\n  };\r\n\r\n  const animation = useAnimatedStyle(() => {\r\n    const targetHeight = ctx?.value ? height : 0;\r\n    animatedHeight.value = withTiming(\r\n      Math.max(targetHeight, ctx?.minHeight ?? 0),\r\n      {\r\n        duration: ctx?.duration,\r\n      }\r\n    );\r\n\r\n    return {\r\n      height: animatedHeight.value,\r\n    };\r\n  }, [ctx?.value, ctx?.duration, height, ctx?.minHeight]);\r\n\r\n  return (\r\n    <Animated.View {...props} style={cn(styles.root, animation)}>\r\n      <View onLayout={onLayout} style={cn(styles.content, style)} {...props} />\r\n    </Animated.View>\r\n  );\r\n}\r\n\r\nexport { Collapsible, CollapsibleContent, CollapsibleTrigger };\r\n",
      "type": "registry:ui"
    }
  ]
}