{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "badge",
  "type": "registry:ui",
  "title": "Badge",
  "description": "Badge component",
  "dependencies": ["react-native", "native-variants", "react"],
  "files": [
    {
      "path": "components/ui/badge.tsx",
      "content": "import { type ComponentProps, memo } from \"react\";\r\nimport { View } from \"react-native\";\r\nimport { cn } from \"@/lib/cn\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type VariantProps, composeText } from \"native-variants\";\r\nimport { TypographyProvider } from \"./typography\";\r\n\r\nconst badgeVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"text\"],\r\n    base: {\r\n      root: {\r\n        borderWidth: 1,\r\n        display: \"flex\",\r\n        fontWeight: \"400\",\r\n        textAlign: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\",\r\n        borderRadius: t.radii.lg,\r\n        textAlignVertical: \"center\",\r\n      },\r\n    },\r\n    variants: {\r\n      variant: {\r\n        default: {\r\n          root: {\r\n            borderColor: t.colors.primary,\r\n            backgroundColor: t.colors.primary,\r\n            color: t.colors.primaryForeground,\r\n          },\r\n        },\r\n        ghost: {\r\n          root: {\r\n            borderColor: t.colors.transparent,\r\n            backgroundColor: t.colors.transparent,\r\n            color: t.colors.primary,\r\n          },\r\n        },\r\n        outline: {\r\n          root: {\r\n            borderColor: t.colors.border,\r\n            backgroundColor: t.colors.transparent,\r\n            color: t.colors.primary,\r\n          },\r\n        },\r\n        secondary: {\r\n          root: {\r\n            borderColor: t.colors.secondary,\r\n            backgroundColor: t.colors.secondary,\r\n            color: t.colors.secondaryForeground,\r\n          },\r\n        },\r\n        destructive: {\r\n          root: {\r\n            borderColor: t.colors.destructive,\r\n            backgroundColor: t.colors.destructive,\r\n            color: t.colors.white,\r\n          },\r\n        },\r\n      },\r\n      size: {\r\n        default: {\r\n          root: {\r\n            height: 30,\r\n            paddingHorizontal: t.spacing[\"3.5\"],\r\n            fontSize: t.fontSizes.xxs,\r\n          },\r\n        },\r\n        sm: {\r\n          root: {\r\n            height: 26,\r\n            fontSize: t.fontSizes.xxs,\r\n            paddingHorizontal: t.spacing[\"2.5\"],\r\n          },\r\n        },\r\n        lg: {\r\n          root: {\r\n            height: 34,\r\n            fontSize: t.fontSizes.xxs,\r\n            paddingHorizontal: t.spacing[\"2.5\"],\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n      variant: \"default\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction BadgeComponent({\r\n  size,\r\n  style,\r\n  variant,\r\n  ...props\r\n}: ComponentProps<typeof View> & VariantProps<typeof badgeVariants>) {\r\n  const styles = badgeVariants({ variant, size });\r\n\r\n  return (\r\n    <TypographyProvider props={composeText(styles.root)}>\r\n      <View style={cn(styles.root, style as any)} {...props} />\r\n    </TypographyProvider>\r\n  );\r\n}\r\n\r\nconst Badge = memo(BadgeComponent);\r\n\r\nexport { Badge, badgeVariants };\r\n",
      "type": "registry:ui"
    }
  ]
}
