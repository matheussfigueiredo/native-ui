{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "title": "button",
  "description": "Button component",
  "dependencies": ["react-native", "native-variants", "react"],
  "files": [
    {
      "path": "components/ui/button.tsx",
      "content": "import { type ComponentProps, memo } from \"react\";\r\nimport { TouchableOpacity } from \"react-native\";\r\nimport { Slot } from \"./slot\";\r\nimport { cn } from \"@/lib/cn\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type VariantProps, composeText } from \"native-variants\";\r\nimport { TypographyProvider } from \"./typography\";\r\n\r\nconst buttonVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\"],\r\n    base: {\r\n      root: {\r\n        borderWidth: 1,\r\n        display: \"flex\",\r\n        fontWeight: \"400\",\r\n        textAlign: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\",\r\n        borderRadius: t.radii.lg,\r\n        textAlignVertical: \"center\",\r\n      },\r\n    },\r\n    variants: {\r\n      variant: {\r\n        default: {\r\n          root: {\r\n            borderColor: t.colors.primary,\r\n            backgroundColor: t.colors.primary,\r\n            color: t.colors.primaryForeground,\r\n          },\r\n        },\r\n        ghost: {\r\n          root: {\r\n            borderColor: t.colors.transparent,\r\n            backgroundColor: t.colors.transparent,\r\n            color: t.colors.primary,\r\n          },\r\n        },\r\n        outline: {\r\n          root: {\r\n            borderColor: t.colors.border,\r\n            backgroundColor: t.colors.transparent,\r\n            color: t.colors.primary,\r\n          },\r\n        },\r\n        secondary: {\r\n          root: {\r\n            borderColor: t.colors.secondary,\r\n            backgroundColor: t.colors.secondary,\r\n            color: t.colors.secondaryForeground,\r\n          },\r\n        },\r\n        destructive: {\r\n          root: {\r\n            borderColor: t.colors.destructive,\r\n            backgroundColor: t.colors.destructive,\r\n            color: t.colors.white,\r\n          },\r\n        },\r\n      },\r\n      size: {\r\n        default: {\r\n          root: {\r\n            height: 40,\r\n            paddingHorizontal: t.spacing[\"3.5\"],\r\n            fontSize: t.fontSizes.sm,\r\n          },\r\n        },\r\n        sm: {\r\n          root: {\r\n            height: 38,\r\n            fontSize: t.fontSizes.xs,\r\n            paddingHorizontal: t.spacing[\"2.5\"],\r\n          },\r\n        },\r\n        lg: {\r\n          root: {\r\n            height: 44,\r\n            fontSize: t.fontSizes.sm,\r\n            paddingHorizontal: t.spacing[\"2.5\"],\r\n          },\r\n        },\r\n        icon: {\r\n          root: {\r\n            width: 40,\r\n            height: 40,\r\n            padding: t.spacing[\"0\"],\r\n            borderRadius: t.radii.full,\r\n          },\r\n        },\r\n      },\r\n      disabled: {\r\n        true: {\r\n          root: {\r\n            opacity: t.opacity[\"50\"],\r\n            pointerEvents: \"none\",\r\n            userSelect: \"none\",\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            opacity: t.opacity[\"100\"],\r\n            pointerEvents: \"auto\",\r\n            userSelect: \"auto\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n      variant: \"default\",\r\n      disabled: \"false\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction ButtonComponent({\r\n  size,\r\n  style,\r\n  variant,\r\n  asChild = false,\r\n  disabled = false,\r\n  ...props\r\n}: ComponentProps<typeof TouchableOpacity> &\r\n  VariantProps<typeof buttonVariants> & {\r\n    asChild?: boolean;\r\n  }) {\r\n  const Comp = asChild ? Slot : TouchableOpacity;\r\n  const styles = buttonVariants({ variant, size, disabled });\r\n\r\n  return (\r\n    <TypographyProvider props={composeText(styles.root)}>\r\n      <Comp\r\n        activeOpacity={0.6}\r\n        style={cn(styles.root, style as any)}\r\n        {...props}\r\n      />\r\n    </TypographyProvider>\r\n  );\r\n}\r\n\r\nconst Button = memo(ButtonComponent);\r\n\r\nexport { Button, buttonVariants };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "lib/nva.ts",
      "content": "import { createNVA } from \"native-variants\";\r\n\r\nexport const { styled, theme } = createNVA({\r\n  theme: {\r\n    colors: {\r\n      background: \"#ffffff\",\r\n      foreground: \"#262626\",\r\n      card: \"#ffffff\",\r\n      cardForeground: \"#262626\",\r\n      popover: \"#ffffff\",\r\n      popoverForeground: \"#262626\",\r\n      primary: \"#535353\",\r\n      primaryForeground: \"#fbfbfb\",\r\n      secondary: \"#f7f7f7\",\r\n      secondaryForeground: \"#535353\",\r\n      muted: \"#f7f7f7\",\r\n      mutedForeground: \"#8e8e8e\",\r\n      accent: \"#f7f7f7\",\r\n      accentForeground: \"#535353\",\r\n      destructive: \"#c43d40\",\r\n      border: \"#ebebeb\",\r\n      input: \"#ebebeb\",\r\n      ring: \"#b5b5b5\",\r\n      white: \"#ffffff\",\r\n      black: \"#000000\",\r\n      transparent: \"transparent\",\r\n    },\r\n    radii: {\r\n      none: 2,\r\n      sm: 2,\r\n      base: 4,\r\n      md: 6,\r\n      lg: 8,\r\n      xl: 16,\r\n      full: 9999,\r\n    },\r\n    fontSizes: {\r\n      xxs: 12,\r\n      xs: 14,\r\n      sm: 16,\r\n      base: 18,\r\n      lg: 20,\r\n      xl: 24,\r\n      \"2xl\": 28,\r\n      \"3xl\": 30,\r\n      \"4xl\": 34,\r\n      \"5xl\": 38,\r\n      \"6xl\": 40,\r\n    },\r\n    fontWeights: {\r\n      thin: \"100\",\r\n      extraLight: \"200\",\r\n      light: \"300\",\r\n      normal: \"400\",\r\n      medium: \"500\",\r\n      semiBold: \"600\",\r\n      bold: \"700\",\r\n      extraBold: \"800\",\r\n      black: \"900\",\r\n    },\r\n    lineHeights: {\r\n      none: 1,\r\n      tight: 1.25,\r\n      snug: 1.375,\r\n      normal: 1.5,\r\n      relaxed: 1.625,\r\n      loose: 2,\r\n    },\r\n    spacing: {\r\n      0: 0,\r\n      px: 1,\r\n      0.5: 2,\r\n      1: 4,\r\n      1.5: 6,\r\n      2: 8,\r\n      2.5: 10,\r\n      3: 12,\r\n      3.5: 14,\r\n      4: 16,\r\n      5: 20,\r\n      6: 24,\r\n      7: 28,\r\n      8: 32,\r\n      9: 36,\r\n      10: 40,\r\n      11: 44,\r\n      12: 48,\r\n      14: 56,\r\n      16: 64,\r\n      20: 80,\r\n      \"1/2\": \"50%\",\r\n      \"1/3\": \"33.333%\",\r\n      \"2/3\": \"66.666%\",\r\n      \"1/4\": \"25%\",\r\n      \"2/4\": \"50%\",\r\n      \"3/4\": \"75%\",\r\n      full: \"100%\",\r\n    },\r\n    zIndex: {\r\n      1: 1,\r\n      10: 10,\r\n      20: 20,\r\n      30: 30,\r\n      40: 40,\r\n      50: 50,\r\n      99999: 9999,\r\n    },\r\n    opacity: {\r\n      0: 0,\r\n      25: 0.25,\r\n      50: 0.5,\r\n      75: 0.75,\r\n      100: 1,\r\n    },\r\n  },\r\n});\r\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { StyleProp } from \"react-native\";\r\n\r\nfunction flattenStyle<T>(style: StyleProp<T>): T[] {\r\n  if (!style) return [];\r\n  if (Array.isArray(style)) {\r\n    return style.flat\r\n      ? (style.flat().filter(Boolean) as T[])\r\n      : (style.filter(Boolean) as T[]);\r\n  }\r\n  // @ts-ignore\r\n  return [style];\r\n}\r\n\r\nexport function cn<T extends object>(...styles: StyleProp<T>[]): T {\r\n  return styles\r\n    .flatMap(flattenStyle)\r\n    .filter((s): s is T => !!s)\r\n    .reduce<T>((acc, style) => ({ ...acc, ...style }), {} as T);\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "components/ui/slot.tsx",
      "content": "import { composeRefs } from \"native-variants\";\r\nimport {\r\n  cloneElement,\r\n  forwardRef,\r\n  isValidElement,\r\n  type ReactElement,\r\n} from \"react\";\r\n\r\nexport interface SlotProps {\r\n  children: ReactElement<any>;\r\n  [key: string]: any;\r\n}\r\n\r\nconst Slot = forwardRef<unknown, SlotProps>(function Slot(props, ref) {\r\n  const { children, ...restProps } = props;\r\n\r\n  if (!isValidElement(children)) {\r\n    console.warn(\"Slot requires a single valid React element as its child.\");\r\n    return null;\r\n  }\r\n\r\n  const childProps = children.props as Record<string, any>;\r\n  const childRef = (children as any).ref;\r\n\r\n  return cloneElement(children, {\r\n    ...restProps,\r\n    ref: composeRefs(childRef, ref),\r\n    style: [childProps.style, restProps.style].filter(Boolean),\r\n    className: [childProps.className, restProps.className]\r\n      .filter(Boolean)\r\n      .join(\" \"),\r\n  } as any);\r\n});\r\n\r\nexport { Slot };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "components/ui/typography.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { createCTX, type VariantProps } from \"native-variants\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, memo } from \"react\";\r\nimport { type StyleProp, Text, type TextStyle } from \"react-native\";\r\n\r\nconst typographyVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\"],\r\n    base: {\r\n      root: {\r\n        letterSpacing: -0.05,\r\n        color: t.colors.foreground,\r\n      },\r\n    },\r\n    variants: {\r\n      as: {\r\n        xxs: {\r\n          root: {\r\n            fontSize: t.fontSizes.xxs,\r\n            fontWeight: \"400\",\r\n          },\r\n        },\r\n        xs: {\r\n          root: {\r\n            fontSize: t.fontSizes.xs,\r\n            fontWeight: \"400\",\r\n          },\r\n        },\r\n        sm: {\r\n          root: {\r\n            fontSize: t.fontSizes.sm,\r\n            fontWeight: \"400\",\r\n          },\r\n        },\r\n        base: {\r\n          root: {\r\n            fontSize: t.fontSizes.base,\r\n            fontWeight: \"500\",\r\n          },\r\n        },\r\n        lg: {\r\n          root: {\r\n            fontSize: t.fontSizes.lg,\r\n            fontWeight: \"500\",\r\n          },\r\n        },\r\n        xl: {\r\n          root: {\r\n            fontSize: t.fontSizes.xl,\r\n            fontWeight: \"600\",\r\n          },\r\n        },\r\n        \"2xl\": {\r\n          root: {\r\n            fontSize: t.fontSizes[\"2xl\"],\r\n            fontWeight: \"600\",\r\n          },\r\n        },\r\n        \"3xl\": {\r\n          root: {\r\n            fontSize: t.fontSizes[\"3xl\"],\r\n            fontWeight: \"600\",\r\n          },\r\n        },\r\n        \"4xl\": {\r\n          root: {\r\n            fontSize: t.fontSizes[\"4xl\"],\r\n            fontWeight: \"700\",\r\n          },\r\n        },\r\n        \"5xl\": {\r\n          root: {\r\n            fontSize: t.fontSizes[\"5xl\"],\r\n            fontWeight: \"700\",\r\n          },\r\n        },\r\n        \"6xl\": {\r\n          root: {\r\n            fontSize: t.fontSizes[\"6xl\"],\r\n            fontWeight: \"700\",\r\n          },\r\n        },\r\n      },\r\n      textCase: {\r\n        uppercase: {\r\n          root: {\r\n            textTransform: \"uppercase\",\r\n          },\r\n        },\r\n        lowercase: {\r\n          root: {\r\n            textTransform: \"lowercase\",\r\n          },\r\n        },\r\n        capitalize: {\r\n          root: {\r\n            textTransform: \"capitalize\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      as: \"sm\",\r\n      textCase: \"capitalize\",\r\n    },\r\n  })\r\n);\r\n\r\nconst { CTXProvider: TypographyProvider, useCTX: useTypography } =\r\n  createCTX<StyleProp<TextStyle>>();\r\n\r\nfunction TypographyComponent({\r\n  as,\r\n  textCase,\r\n  style,\r\n  ...props\r\n}: ComponentProps<typeof Text> & VariantProps<typeof typographyVariants>) {\r\n  const ctx = useTypography();\r\n  const styles = typographyVariants({ as, textCase });\r\n\r\n  return <Text style={cn(styles.root, ctx, style)} {...props} />;\r\n}\r\n\r\nconst Typography = memo(TypographyComponent);\r\n\r\nexport { Typography, TypographyProvider, useTypography };\r\n",
      "type": "registry:ui"
    }
  ]
}
