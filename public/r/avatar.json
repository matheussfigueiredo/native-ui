{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "avatar",
  "type": "registry:ui",
  "title": "Avatar",
  "description": "Avatar component",
  "files": [
    {
      "path": "components/ui/avatar.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\n\r\nimport { type VariantProps, createCTX } from \"native-variants\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, memo } from \"react\";\r\nimport { Image, Text, View } from \"react-native\";\r\n\r\nexport const shortName = (str: string): string => {\r\n  if (!str.trim()) {\r\n    return \"UN\";\r\n  }\r\n\r\n  const parts = str.trim().split(/\\s+/);\r\n\r\n  if (parts.length > 1) {\r\n    return (parts[0].charAt(0) + parts[1].charAt(0)).toUpperCase();\r\n  }\r\n\r\n  return parts[0].substring(0, 2).toUpperCase();\r\n};\r\n\r\nconst { CTXProvider, useCTX } =\r\n  createCTX<VariantProps<typeof avatarVariants>>();\r\n\r\nconst avatarVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\"root\", \"fallback\", \"image\"],\r\n    base: {\r\n      root: {\r\n        display: \"flex\",\r\n        overflow: \"hidden\",\r\n        position: \"relative\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        borderRadius: t.radii.full,\r\n        backgroundColor: t.colors.border,\r\n      },\r\n      image: {\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        objectFit: \"fill\",\r\n        zIndex: t.zIndex[\"10\"],\r\n      },\r\n      fallback: {\r\n        position: \"absolute\",\r\n        zIndex: -t.zIndex[\"10\"],\r\n      },\r\n    },\r\n    variants: {\r\n      size: {\r\n        default: {\r\n          root: {\r\n            width: 44,\r\n            height: 44,\r\n          },\r\n          fallback: {\r\n            fontSize: t.fontSizes.xs,\r\n          },\r\n        },\r\n        sm: {\r\n          root: {\r\n            width: 56,\r\n            height: 56,\r\n          },\r\n          fallback: {\r\n            fontSize: t.fontSizes.xs,\r\n          },\r\n        },\r\n        md: {\r\n          root: {\r\n            width: 72,\r\n            height: 72,\r\n          },\r\n          fallback: {\r\n            fontSize: t.fontSizes.lg,\r\n          },\r\n        },\r\n        lg: {\r\n          root: {\r\n            width: 96,\r\n            height: 96,\r\n          },\r\n          fallback: {\r\n            fontSize: t.fontSizes[\"2xl\"],\r\n          },\r\n        },\r\n        xl: {\r\n          root: {\r\n            width: 128,\r\n            height: 128,\r\n          },\r\n          fallback: {\r\n            fontSize: t.fontSizes[\"5xl\"],\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      size: \"default\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction AvatarComponent({\r\n  style,\r\n  size,\r\n  ...props\r\n}: ComponentProps<typeof View> & VariantProps<typeof avatarVariants>) {\r\n  const { root } = avatarVariants({ size });\r\n\r\n  return (\r\n    <CTXProvider props={{ size }}>\r\n      <View style={cn(root, style)} {...props} />\r\n    </CTXProvider>\r\n  );\r\n}\r\n\r\nfunction AvatarFallbackComponent({\r\n  style,\r\n  children,\r\n  ...props\r\n}: ComponentProps<typeof Text>) {\r\n  const ctx = useCTX();\r\n  const { fallback } = avatarVariants({ size: ctx?.size });\r\n\r\n  return (\r\n    <Text style={cn(fallback, style)} {...props}>\r\n      {shortName(String(children))}\r\n    </Text>\r\n  );\r\n}\r\n\r\nfunction AvatarImageComponent({\r\n  style,\r\n  ...props\r\n}: ComponentProps<typeof Image>) {\r\n  const { image } = avatarVariants({});\r\n\r\n  return <Image style={cn(image, style)} {...props} />;\r\n}\r\n\r\nconst Avatar = memo(AvatarComponent);\r\n\r\nconst AvatarFallback = memo(AvatarFallbackComponent);\r\n\r\nconst AvatarImage = memo(AvatarImageComponent);\r\n\r\nexport { Avatar, AvatarFallback, AvatarImage };\r\n",
      "type": "registry:ui"
    }
  ]
}
