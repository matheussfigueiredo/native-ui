{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer",
  "type": "registry:ui",
  "title": "drawer",
  "description": "Drawer component",
  "files": [
    {
      "path": "packages/ui/src/components/drawer.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { type VariantProps, createCTX } from \"native-variants\";\r\nimport { styled, theme } from \"@/lib/nva\";\r\nimport {\r\n  BottomSheetBackdrop,\r\n  BottomSheetBackdropProps,\r\n  BottomSheetModal,\r\n  BottomSheetModalProvider,\r\n  BottomSheetView,\r\n} from \"@gorhom/bottom-sheet\";\r\nimport { BottomSheetModalMethods } from \"@gorhom/bottom-sheet/lib/typescript/types\";\r\nimport {\r\n  type ComponentProps,\r\n  memo,\r\n  type PropsWithChildren,\r\n  type RefObject,\r\n  useCallback,\r\n} from \"react\";\r\nimport { Platform, View } from \"react-native\";\r\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\r\nimport { Button } from \"./button\";\r\nimport { Icon } from \"./icon\";\r\n\r\ntype CommonProps = {\r\n  sheetRef?: RefObject<BottomSheetModalMethods<any> | null>;\r\n};\r\n\r\nconst { CTXProvider, useCTX } = createCTX<\r\n  VariantProps<typeof drawerVariants> & CommonProps\r\n>();\r\n\r\nconst drawerVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\r\n      \"root\",\r\n      \"handler\",\r\n      \"wrapper\",\r\n      \"handler_indicator\",\r\n      \"header\",\r\n      \"content\",\r\n    ],\r\n    base: {\r\n      handler: {\r\n        paddingBottom: 0,\r\n        paddingTop: 0,\r\n      },\r\n      handler_indicator: {\r\n        backgroundColor: t.colors.border,\r\n      },\r\n      header: {\r\n        display: \"flex\",\r\n        alignItems: \"flex-start\",\r\n        justifyContent: \"flex-start\",\r\n        paddingBottom: t.spacing[\"2\"],\r\n        paddingHorizontal: t.spacing[\"3.5\"],\r\n        paddingTop: Platform.OS === \"ios\" ? t.spacing[\"2\"] : t.spacing[\"3\"],\r\n      },\r\n      content: {\r\n        paddingBottom: t.spacing[\"6\"],\r\n        paddingHorizontal: t.spacing[\"6\"],\r\n        paddingTop: t.spacing[\"2\"],\r\n      },\r\n    },\r\n    variants: {\r\n      fullScreen: {\r\n        true: {\r\n          root: {\r\n            borderRadius: 0,\r\n          },\r\n          content: {\r\n            height: \"100%\",\r\n          },\r\n          handler_indicator: {\r\n            display: \"none\",\r\n            padding: 0,\r\n          },\r\n          wrapper: {\r\n            height: \"100%\",\r\n          },\r\n        },\r\n        false: {\r\n          root: {\r\n            borderRadius: t.radii[\"xl\"],\r\n          },\r\n          content: {\r\n            height: \"auto\",\r\n          },\r\n          handler_indicator: {\r\n            marginTop: t.radii[\"xl\"],\r\n            paddingBottom: 0,\r\n          },\r\n          wrapper: {\r\n            height: \"auto\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      fullScreen: \"false\",\r\n    },\r\n  })\r\n);\r\n\r\nfunction Drawer({\r\n  children,\r\n  fullScreen,\r\n  sheetRef,\r\n}: ComponentProps<typeof BottomSheetModalProvider> &\r\n  VariantProps<typeof drawerVariants> &\r\n  CommonProps) {\r\n  return (\r\n    <BottomSheetModalProvider>\r\n      <CTXProvider props={{ fullScreen, sheetRef }}>{children}</CTXProvider>\r\n    </BottomSheetModalProvider>\r\n  );\r\n}\r\n\r\nfunction DrawerComponent({\r\n  children,\r\n  asChild = false,\r\n  style,\r\n  ...props\r\n}: ComponentProps<typeof BottomSheetModal> &\r\n  PropsWithChildren & {\r\n    asChild?: boolean;\r\n  }) {\r\n  const ctx = useCTX();\r\n  const insets = useSafeAreaInsets();\r\n  const styles = drawerVariants({ fullScreen: ctx?.fullScreen });\r\n\r\n  const onClose = useCallback(() => {\r\n    ctx?.sheetRef?.current?.close();\r\n  }, [ctx?.sheetRef]);\r\n\r\n  return (\r\n    <BottomSheetModal\r\n      ref={ctx?.sheetRef}\r\n      enableDismissOnClose\r\n      handleStyle={styles.handler}\r\n      backgroundStyle={styles.root}\r\n      enableOverDrag={!ctx?.fullScreen}\r\n      enableDynamicSizing={!ctx?.fullScreen}\r\n      enablePanDownToClose={!ctx?.fullScreen}\r\n      handleIndicatorStyle={styles.handler_indicator}\r\n      enableHandlePanningGesture={!ctx?.fullScreen}\r\n      enableContentPanningGesture={!ctx?.fullScreen}\r\n      snapPoints={!ctx?.fullScreen ? undefined : [\"100%\"]}\r\n      backdropComponent={(props: BottomSheetBackdropProps) => (\r\n        <BottomSheetBackdrop\r\n          opacity={0.5}\r\n          appearsOnIndex={0}\r\n          disappearsOnIndex={-1}\r\n          {...props}\r\n        />\r\n      )}\r\n      {...props}\r\n    >\r\n      <BottomSheetView\r\n        style={cn(\r\n          styles.wrapper,\r\n          ctx?.fullScreen && {\r\n            paddingTop: insets.top,\r\n          },\r\n          {\r\n            paddingBottom:\r\n              Platform.OS === \"ios\" ? theme.spacing[\"4\"] : insets.bottom,\r\n          }\r\n        )}\r\n      >\r\n        {asChild ? (\r\n          children\r\n        ) : (\r\n          <>\r\n            {ctx?.fullScreen && (\r\n              <View style={styles.header}>\r\n                <Button onPress={onClose} size=\"icon\" variant=\"ghost\">\r\n                  <Icon name=\"x\" size={28} />\r\n                </Button>\r\n              </View>\r\n            )}\r\n            <View\r\n              style={\r\n                cn(\r\n                  styles.content,\r\n                  { paddingBottom: insets.bottom },\r\n                  style\r\n                ) as any\r\n              }\r\n            >\r\n              {children}\r\n            </View>\r\n          </>\r\n        )}\r\n      </BottomSheetView>\r\n    </BottomSheetModal>\r\n  );\r\n}\r\n\r\nconst DrawerContent = memo(DrawerComponent);\r\n\r\nexport { DrawerContent, Drawer };\r\n",
      "type": "registry:ui"
    }
  ]
}