{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form",
  "type": "registry:ui",
  "title": "form",
  "description": "Form component",
  "dependencies": [
    "react-native",
    "native-variants",
    "react",
    "@hookform/resolvers",
    "react-hook-form"
  ],
  "files": [
    {
      "path": "components/ui/form.tsx",
      "content": "import { cn } from \"@/lib/cn\";\r\nimport { styled } from \"@/lib/nva\";\r\nimport { type ComponentProps, createContext, useContext, useId } from \"react\";\r\nimport {\r\n  Controller,\r\n  type ControllerProps,\r\n  type FieldPath,\r\n  type FieldValues,\r\n  FormProvider,\r\n  useFormContext,\r\n  useFormState,\r\n} from \"react-hook-form\";\r\nimport { Text, View } from \"react-native\";\r\n\r\nconst formVariants = styled((ctx, t) =>\r\n  ctx({\r\n    slots: [\r\n      \"root\",\r\n      \"item\",\r\n      \"field\",\r\n      \"label\",\r\n      \"description\",\r\n      \"control\",\r\n      \"message\",\r\n    ],\r\n    base: {\r\n      root: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        gap: t.spacing[\"1.5\"],\r\n        justifyContent: \"center\",\r\n      },\r\n      item: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        gap: t.spacing[\"0.5\"],\r\n        width: \"100%\",\r\n      },\r\n      field: {\r\n        width: \"100%\",\r\n      },\r\n      label: {\r\n        fontSize: t.fontSizes.xs,\r\n        fontWeight: \"500\",\r\n        color: t.colors.mutedForeground,\r\n      },\r\n      description: {\r\n        fontSize: t.fontSizes.xs,\r\n        color: t.colors.mutedForeground,\r\n        fontWeight: \"400\",\r\n      },\r\n      control: {\r\n        width: \"100%\",\r\n        height: \"auto\",\r\n      },\r\n      message: {\r\n        fontSize: t.fontSizes.xs,\r\n        color: t.colors.destructive,\r\n        fontWeight: \"400\",\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName;\r\n};\r\n\r\ntype FormItemContextValue = {\r\n  id: string;\r\n};\r\n\r\nconst FormFieldContext = createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n);\r\n\r\nconst FormItemContext = createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n);\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = useContext(FormFieldContext);\r\n  const itemContext = useContext(FormItemContext);\r\n  const { getFieldState } = useFormContext();\r\n  const formState = useFormState({ name: fieldContext.name });\r\n  const fieldState = getFieldState(fieldContext.name, formState);\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\");\r\n  }\r\n\r\n  const { id } = itemContext;\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  };\r\n};\r\n\r\nconst Form = FormProvider;\r\n\r\nfunction FormField<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({ ...props }: ControllerProps<TFieldValues, TName>) {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  );\r\n}\r\n\r\nfunction FormItem({ style, ...props }: ComponentProps<typeof View>) {\r\n  const id = useId();\r\n  const styles = formVariants();\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <View style={cn(styles.item, style)} {...props} />\r\n    </FormItemContext.Provider>\r\n  );\r\n}\r\n\r\nfunction FormLabel({ style, ...props }: ComponentProps<typeof Text>) {\r\n  const styles = formVariants();\r\n\r\n  return <Text style={cn(styles.label, style)} {...props} />;\r\n}\r\n\r\nfunction FormDescription({ style, ...props }: ComponentProps<typeof Text>) {\r\n  const { formDescriptionId } = useFormField();\r\n  const styles = formVariants();\r\n\r\n  return (\r\n    <Text\r\n      id={formDescriptionId}\r\n      style={cn(styles.description, style)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction FormMessage({ style, ...props }: ComponentProps<typeof Text>) {\r\n  const styles = formVariants();\r\n  const { error, formMessageId } = useFormField();\r\n  const body = error ? String(error?.message ?? \"\") : props.children;\r\n\r\n  if (!body) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Text id={formMessageId} style={cn(styles.message, style)} {...props}>\r\n      {body}\r\n    </Text>\r\n  );\r\n}\r\n\r\nfunction FormControl({ style, ...props }: ComponentProps<typeof View>) {\r\n  const { formItemId } = useFormField();\r\n\r\n  const styles = formVariants();\r\n\r\n  return <View id={formItemId} style={cn(styles.control, style)} {...props} />;\r\n}\r\n\r\nexport {\r\n  Form,\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "lib/nva.ts",
      "content": "import { createNVA } from \"native-variants\";\r\n\r\nexport const { styled, theme } = createNVA({\r\n  theme: {\r\n    colors: {\r\n      background: \"#ffffff\",\r\n      foreground: \"#262626\",\r\n      card: \"#ffffff\",\r\n      cardForeground: \"#262626\",\r\n      popover: \"#ffffff\",\r\n      popoverForeground: \"#262626\",\r\n      primary: \"#535353\",\r\n      primaryForeground: \"#fbfbfb\",\r\n      secondary: \"#f7f7f7\",\r\n      secondaryForeground: \"#535353\",\r\n      muted: \"#f7f7f7\",\r\n      mutedForeground: \"#8e8e8e\",\r\n      accent: \"#f7f7f7\",\r\n      accentForeground: \"#535353\",\r\n      destructive: \"#c43d40\",\r\n      border: \"#ebebeb\",\r\n      input: \"#ebebeb\",\r\n      ring: \"#b5b5b5\",\r\n      white: \"#ffffff\",\r\n      black: \"#000000\",\r\n      transparent: \"transparent\",\r\n    },\r\n    radii: {\r\n      none: 2,\r\n      sm: 2,\r\n      base: 4,\r\n      md: 6,\r\n      lg: 8,\r\n      xl: 16,\r\n      full: 9999,\r\n    },\r\n    fontSizes: {\r\n      xxs: 12,\r\n      xs: 14,\r\n      sm: 16,\r\n      base: 18,\r\n      lg: 20,\r\n      xl: 24,\r\n      \"2xl\": 28,\r\n      \"3xl\": 30,\r\n      \"4xl\": 34,\r\n      \"5xl\": 38,\r\n      \"6xl\": 40,\r\n    },\r\n    fontWeights: {\r\n      thin: \"100\",\r\n      extraLight: \"200\",\r\n      light: \"300\",\r\n      normal: \"400\",\r\n      medium: \"500\",\r\n      semiBold: \"600\",\r\n      bold: \"700\",\r\n      extraBold: \"800\",\r\n      black: \"900\",\r\n    },\r\n    lineHeights: {\r\n      none: 1,\r\n      tight: 1.25,\r\n      snug: 1.375,\r\n      normal: 1.5,\r\n      relaxed: 1.625,\r\n      loose: 2,\r\n    },\r\n    spacing: {\r\n      0: 0,\r\n      px: 1,\r\n      0.5: 2,\r\n      1: 4,\r\n      1.5: 6,\r\n      2: 8,\r\n      2.5: 10,\r\n      3: 12,\r\n      3.5: 14,\r\n      4: 16,\r\n      5: 20,\r\n      6: 24,\r\n      7: 28,\r\n      8: 32,\r\n      9: 36,\r\n      10: 40,\r\n      11: 44,\r\n      12: 48,\r\n      14: 56,\r\n      16: 64,\r\n      20: 80,\r\n      \"1/2\": \"50%\",\r\n      \"1/3\": \"33.333%\",\r\n      \"2/3\": \"66.666%\",\r\n      \"1/4\": \"25%\",\r\n      \"2/4\": \"50%\",\r\n      \"3/4\": \"75%\",\r\n      full: \"100%\",\r\n    },\r\n    zIndex: {\r\n      1: 1,\r\n      10: 10,\r\n      20: 20,\r\n      30: 30,\r\n      40: 40,\r\n      50: 50,\r\n      99999: 9999,\r\n    },\r\n    opacity: {\r\n      0: 0,\r\n      25: 0.25,\r\n      50: 0.5,\r\n      75: 0.75,\r\n      100: 1,\r\n    },\r\n  },\r\n});\r\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/cn.ts",
      "content": "import { StyleProp } from \"react-native\";\r\n\r\nfunction flattenStyle<T>(style: StyleProp<T>): T[] {\r\n  if (!style) return [];\r\n  if (Array.isArray(style)) {\r\n    return style.flat\r\n      ? (style.flat().filter(Boolean) as T[])\r\n      : (style.filter(Boolean) as T[]);\r\n  }\r\n  // @ts-ignore\r\n  return [style];\r\n}\r\n\r\nexport function cn<T extends object>(...styles: StyleProp<T>[]): T {\r\n  return styles\r\n    .flatMap(flattenStyle)\r\n    .filter((s): s is T => !!s)\r\n    .reduce<T>((acc, style) => ({ ...acc, ...style }), {} as T);\r\n}\r\n",
      "type": "registry:lib"
    }
  ]
}
